// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace OpenHarmony.NDK.Bindings
{
    public unsafe partial class jsvm
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_Init", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_Init(__IntPtr options);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateVM", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateVM(__IntPtr options, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_SetMicrotaskPolicy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_SetMicrotaskPolicy(__IntPtr vm, global::OpenHarmony.NDK.Bindings.JSVM_MicrotaskPolicy policy);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_DestroyVM", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DestroyVM(__IntPtr vm);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateProxy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateProxy(__IntPtr env, __IntPtr target, __IntPtr handler, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsProxy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsProxy(__IntPtr env, __IntPtr value, bool* isProxy);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_ProxyGetTarget", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ProxyGetTarget(__IntPtr env, __IntPtr value, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_OpenVMScope", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_OpenVMScope(__IntPtr vm, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CloseVMScope", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CloseVMScope(__IntPtr vm, __IntPtr scope);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateEnv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateEnv(__IntPtr vm, ulong propertyCount, __IntPtr properties, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateEnvFromSnapshot", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateEnvFromSnapshot(__IntPtr vm, ulong index, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_DestroyEnv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DestroyEnv(__IntPtr env);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_OpenEnvScope", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_OpenEnvScope(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CloseEnvScope", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CloseEnvScope(__IntPtr env, __IntPtr scope);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetVM", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetVM(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CompileScript", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CompileScript(__IntPtr env, __IntPtr script, byte* cachedData, ulong cacheDataLength, bool eagerCompile, bool* cacheRejected, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CompileScriptWithOrigin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CompileScriptWithOrigin(__IntPtr env, __IntPtr script, byte* cachedData, ulong cacheDataLength, bool eagerCompile, bool* cacheRejected, __IntPtr origin, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateCodeCache", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateCodeCache(__IntPtr env, __IntPtr script, byte** data, ulong* length);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_RunScript", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_RunScript(__IntPtr env, __IntPtr script, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_SetInstanceData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_SetInstanceData(__IntPtr env, __IntPtr data, __IntPtr finalizeCb, __IntPtr finalizeHint);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetInstanceData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetInstanceData(__IntPtr env, __IntPtr* data);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetLastErrorInfo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetLastErrorInfo(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_Throw", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_Throw(__IntPtr env, __IntPtr error);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_ThrowError", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ThrowError(__IntPtr env, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string code, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string msg);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_ThrowTypeError", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ThrowTypeError(__IntPtr env, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string code, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string msg);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_ThrowRangeError", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ThrowRangeError(__IntPtr env, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string code, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string msg);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_ThrowSyntaxError", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ThrowSyntaxError(__IntPtr env, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string code, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string msg);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsError", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsError(__IntPtr env, __IntPtr value, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateError", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateError(__IntPtr env, __IntPtr code, __IntPtr msg, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateTypeError", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateTypeError(__IntPtr env, __IntPtr code, __IntPtr msg, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateRangeError", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateRangeError(__IntPtr env, __IntPtr code, __IntPtr msg, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateSyntaxError", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateSyntaxError(__IntPtr env, __IntPtr code, __IntPtr msg, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetAndClearLastException", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetAndClearLastException(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsExceptionPending", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsExceptionPending(__IntPtr env, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_OpenHandleScope", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_OpenHandleScope(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CloseHandleScope", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CloseHandleScope(__IntPtr env, __IntPtr scope);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_OpenEscapableHandleScope", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_OpenEscapableHandleScope(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CloseEscapableHandleScope", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CloseEscapableHandleScope(__IntPtr env, __IntPtr scope);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_EscapeHandle", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_EscapeHandle(__IntPtr env, __IntPtr scope, __IntPtr escapee, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateReference", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateReference(__IntPtr env, __IntPtr value, uint initialRefcount, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_DeleteReference", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DeleteReference(__IntPtr env, __IntPtr @ref);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_ReferenceRef", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ReferenceRef(__IntPtr env, __IntPtr @ref, uint* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_ReferenceUnref", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ReferenceUnref(__IntPtr env, __IntPtr @ref, uint* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetReferenceValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetReferenceValue(__IntPtr env, __IntPtr @ref, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateArray", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateArray(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateArrayWithLength", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateArrayWithLength(__IntPtr env, ulong length, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateArraybuffer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateArraybuffer(__IntPtr env, ulong byteLength, __IntPtr* data, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_AllocateArrayBufferBackingStoreData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_AllocateArrayBufferBackingStoreData(ulong byteLength, global::OpenHarmony.NDK.Bindings.JSVM_InitializedFlag initialized, __IntPtr* data);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_FreeArrayBufferBackingStoreData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_FreeArrayBufferBackingStoreData(__IntPtr data);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateArrayBufferFromBackingStoreData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateArrayBufferFromBackingStoreData(__IntPtr env, __IntPtr data, ulong backingStoreSize, ulong offset, ulong arrayBufferSize, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateDate", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateDate(__IntPtr env, double time, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateExternal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateExternal(__IntPtr env, __IntPtr data, __IntPtr finalizeCb, __IntPtr finalizeHint, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateObject(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateSymbol", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateSymbol(__IntPtr env, __IntPtr description, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_SymbolFor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_SymbolFor(__IntPtr env, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string utf8description, ulong length, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateTypedarray", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateTypedarray(__IntPtr env, global::OpenHarmony.NDK.Bindings.JSVM_TypedarrayType type, ulong length, __IntPtr arraybuffer, ulong byteOffset, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateDataview", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateDataview(__IntPtr env, ulong length, __IntPtr arraybuffer, ulong byteOffset, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateInt32", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateInt32(__IntPtr env, int value, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateUint32", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateUint32(__IntPtr env, uint value, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateInt64", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateInt64(__IntPtr env, long value, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateDouble", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateDouble(__IntPtr env, double value, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateBigintInt64", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateBigintInt64(__IntPtr env, long value, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateBigintUint64", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateBigintUint64(__IntPtr env, ulong value, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateBigintWords", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateBigintWords(__IntPtr env, int signBit, ulong wordCount, ulong* words, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateStringLatin1", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateStringLatin1(__IntPtr env, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str, ulong length, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateStringUtf16", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateStringUtf16(__IntPtr env, [MarshalAs(UnmanagedType.LPWStr)] string str, ulong length, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateStringUtf8", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateStringUtf8(__IntPtr env, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str, ulong length, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetArrayLength", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetArrayLength(__IntPtr env, __IntPtr value, uint* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetArraybufferInfo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetArraybufferInfo(__IntPtr env, __IntPtr arraybuffer, __IntPtr* data, ulong* byteLength);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetPrototype", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetPrototype(__IntPtr env, __IntPtr @object, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetTypedarrayInfo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetTypedarrayInfo(__IntPtr env, __IntPtr typedarray, global::OpenHarmony.NDK.Bindings.JSVM_TypedarrayType* type, ulong* length, __IntPtr* data, __IntPtr arraybuffer, ulong* byteOffset);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetDataviewInfo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetDataviewInfo(__IntPtr env, __IntPtr dataview, ulong* bytelength, __IntPtr* data, __IntPtr arraybuffer, ulong* byteOffset);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetDateValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetDateValue(__IntPtr env, __IntPtr value, double* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetValueBool", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueBool(__IntPtr env, __IntPtr value, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetValueDouble", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueDouble(__IntPtr env, __IntPtr value, double* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetValueBigintInt64", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueBigintInt64(__IntPtr env, __IntPtr value, long* result, bool* lossless);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetValueBigintUint64", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueBigintUint64(__IntPtr env, __IntPtr value, ulong* result, bool* lossless);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetValueBigintWords", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueBigintWords(__IntPtr env, __IntPtr value, int* signBit, ulong* wordCount, ulong* words);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetValueExternal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueExternal(__IntPtr env, __IntPtr value, __IntPtr* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetValueInt32", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueInt32(__IntPtr env, __IntPtr value, int* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetValueInt64", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueInt64(__IntPtr env, __IntPtr value, long* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetValueStringLatin1", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueStringLatin1(__IntPtr env, __IntPtr value, sbyte* buf, ulong bufsize, ulong* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetValueStringUtf8", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueStringUtf8(__IntPtr env, __IntPtr value, sbyte* buf, ulong bufsize, ulong* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetValueStringUtf16", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueStringUtf16(__IntPtr env, __IntPtr value, char* buf, ulong bufsize, ulong* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetValueUint32", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueUint32(__IntPtr env, __IntPtr value, uint* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetBoolean", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetBoolean(__IntPtr env, bool value, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetGlobal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetGlobal(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetNull", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetNull(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetUndefined", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetUndefined(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CoerceToBool", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CoerceToBool(__IntPtr env, __IntPtr value, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CoerceToNumber", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CoerceToNumber(__IntPtr env, __IntPtr value, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CoerceToObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CoerceToObject(__IntPtr env, __IntPtr value, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CoerceToString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CoerceToString(__IntPtr env, __IntPtr value, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_Typeof", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_Typeof(__IntPtr env, __IntPtr value, global::OpenHarmony.NDK.Bindings.JSVM_ValueType* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_Instanceof", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_Instanceof(__IntPtr env, __IntPtr @object, __IntPtr constructor, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsArray", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsArray(__IntPtr env, __IntPtr value, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsArraybuffer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsArraybuffer(__IntPtr env, __IntPtr value, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsDate", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsDate(__IntPtr env, __IntPtr value, bool* isDate);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsTypedarray", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsTypedarray(__IntPtr env, __IntPtr value, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsDataview", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsDataview(__IntPtr env, __IntPtr value, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_StrictEquals", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_StrictEquals(__IntPtr env, __IntPtr lhs, __IntPtr rhs, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_Equals", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_Equals(__IntPtr env, __IntPtr lhs, __IntPtr rhs, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_DetachArraybuffer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DetachArraybuffer(__IntPtr env, __IntPtr arraybuffer);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsDetachedArraybuffer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsDetachedArraybuffer(__IntPtr env, __IntPtr value, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetPropertyNames", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetPropertyNames(__IntPtr env, __IntPtr @object, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetAllPropertyNames", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetAllPropertyNames(__IntPtr env, __IntPtr @object, global::OpenHarmony.NDK.Bindings.JSVM_KeyCollectionMode keyMode, global::OpenHarmony.NDK.Bindings.JSVM_KeyFilter keyFilter, global::OpenHarmony.NDK.Bindings.JSVM_KeyConversion keyConversion, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_SetProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_SetProperty(__IntPtr env, __IntPtr @object, __IntPtr key, __IntPtr value);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetProperty(__IntPtr env, __IntPtr @object, __IntPtr key, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_HasProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_HasProperty(__IntPtr env, __IntPtr @object, __IntPtr key, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_DeleteProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DeleteProperty(__IntPtr env, __IntPtr @object, __IntPtr key, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_HasOwnProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_HasOwnProperty(__IntPtr env, __IntPtr @object, __IntPtr key, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_SetNamedProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_SetNamedProperty(__IntPtr env, __IntPtr @object, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string utf8name, __IntPtr value);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetNamedProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetNamedProperty(__IntPtr env, __IntPtr @object, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string utf8name, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_HasNamedProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_HasNamedProperty(__IntPtr env, __IntPtr @object, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string utf8name, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_SetElement", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_SetElement(__IntPtr env, __IntPtr @object, uint index, __IntPtr value);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetElement", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetElement(__IntPtr env, __IntPtr @object, uint index, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_HasElement", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_HasElement(__IntPtr env, __IntPtr @object, uint index, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_DeleteElement", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DeleteElement(__IntPtr env, __IntPtr @object, uint index, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_DefineProperties", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DefineProperties(__IntPtr env, __IntPtr @object, ulong propertyCount, __IntPtr properties);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_ObjectFreeze", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ObjectFreeze(__IntPtr env, __IntPtr @object);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_ObjectSeal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ObjectSeal(__IntPtr env, __IntPtr @object);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CallFunction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CallFunction(__IntPtr env, __IntPtr recv, __IntPtr func, ulong argc, __IntPtr argv, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateFunction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateFunction(__IntPtr env, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string utf8name, ulong length, __IntPtr cb, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetCbInfo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetCbInfo(__IntPtr env, __IntPtr cbinfo, ulong* argc, __IntPtr argv, __IntPtr thisArg, __IntPtr* data);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetNewTarget", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetNewTarget(__IntPtr env, __IntPtr cbinfo, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_NewInstance", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_NewInstance(__IntPtr env, __IntPtr constructor, ulong argc, __IntPtr argv, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_DefineClass", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DefineClass(__IntPtr env, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string utf8name, ulong length, __IntPtr constructor, ulong propertyCount, __IntPtr properties, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_Wrap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_Wrap(__IntPtr env, __IntPtr jsObject, __IntPtr nativeObject, __IntPtr finalizeCb, __IntPtr finalizeHint, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_Unwrap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_Unwrap(__IntPtr env, __IntPtr jsObject, __IntPtr* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_RemoveWrap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_RemoveWrap(__IntPtr env, __IntPtr jsObject, __IntPtr* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_TypeTagObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_TypeTagObject(__IntPtr env, __IntPtr value, __IntPtr typeTag);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CheckObjectTypeTag", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CheckObjectTypeTag(__IntPtr env, __IntPtr value, __IntPtr typeTag, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_AddFinalizer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_AddFinalizer(__IntPtr env, __IntPtr jsObject, __IntPtr finalizeData, __IntPtr finalizeCb, __IntPtr finalizeHint, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetVersion", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetVersion(__IntPtr env, uint* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetVMInfo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetVMInfo(__IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_AdjustExternalMemory", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_AdjustExternalMemory(__IntPtr env, long changeInBytes, long* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_MemoryPressureNotification", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_MemoryPressureNotification(__IntPtr env, global::OpenHarmony.NDK.Bindings.JSVM_MemoryPressureLevel level);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreatePromise", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreatePromise(__IntPtr env, __IntPtr deferred, __IntPtr promise);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_ResolveDeferred", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ResolveDeferred(__IntPtr env, __IntPtr deferred, __IntPtr resolution);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_RejectDeferred", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_RejectDeferred(__IntPtr env, __IntPtr deferred, __IntPtr rejection);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsPromise", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsPromise(__IntPtr env, __IntPtr value, bool* isPromise);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_PromiseRegisterHandler", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_PromiseRegisterHandler(__IntPtr env, __IntPtr promise, __IntPtr onFulfilled, __IntPtr onRejected, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_JsonParse", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_JsonParse(__IntPtr env, __IntPtr jsonString, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_JsonStringify", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_JsonStringify(__IntPtr env, __IntPtr jsonObject, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateSnapshot", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateSnapshot(__IntPtr vm, ulong contextCount, __IntPtr contexts, sbyte** blobData, ulong* blobSize);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetHeapStatistics", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetHeapStatistics(__IntPtr vm, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_StartCpuProfiler", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_StartCpuProfiler(__IntPtr vm, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_StopCpuProfiler", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_StopCpuProfiler(__IntPtr vm, __IntPtr profiler, __IntPtr stream, __IntPtr streamData);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_TakeHeapSnapshot", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_TakeHeapSnapshot(__IntPtr vm, __IntPtr stream, __IntPtr streamData);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_OpenInspector", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_OpenInspector(__IntPtr env, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string host, ushort port);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CloseInspector", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CloseInspector(__IntPtr env);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_WaitForDebugger", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_WaitForDebugger(__IntPtr env, bool breakNextLine);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_DefineClassWithPropertyHandler", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DefineClassWithPropertyHandler(__IntPtr env, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string utf8name, ulong length, __IntPtr constructor, ulong propertyCount, __IntPtr properties, __IntPtr propertyHandlerCfg, __IntPtr callAsFunctionCallback, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsLocked", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsLocked(__IntPtr env, bool* isLocked);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_AcquireLock", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_AcquireLock(__IntPtr env);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_ReleaseLock", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ReleaseLock(__IntPtr env);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_PumpMessageLoop", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_PumpMessageLoop(__IntPtr vm, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_PerformMicrotaskCheckpoint", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_PerformMicrotaskCheckpoint(__IntPtr vm);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsCallable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsCallable(__IntPtr env, __IntPtr value, bool* isCallable);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsUndefined", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsUndefined(__IntPtr env, __IntPtr value, bool* isUndefined);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsNull", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsNull(__IntPtr env, __IntPtr value, bool* isNull);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsNullOrUndefined", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsNullOrUndefined(__IntPtr env, __IntPtr value, bool* isNullOrUndefined);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsBoolean", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsBoolean(__IntPtr env, __IntPtr value, bool* isBoolean);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsNumber", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsNumber(__IntPtr env, __IntPtr value, bool* isNumber);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsString(__IntPtr env, __IntPtr value, bool* isString);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsSymbol", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsSymbol(__IntPtr env, __IntPtr value, bool* isSymbol);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsFunction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsFunction(__IntPtr env, __IntPtr value, bool* isFunction);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsObject(__IntPtr env, __IntPtr value, bool* isObject);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsBigInt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsBigInt(__IntPtr env, __IntPtr value, bool* isBigInt);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateMap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateMap(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsMap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsMap(__IntPtr env, __IntPtr value, bool* isMap);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateSet", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateSet(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsSet", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsSet(__IntPtr env, __IntPtr value, bool* isSet);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CompileScriptWithOptions", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CompileScriptWithOptions(__IntPtr env, __IntPtr script, ulong optionCount, global::OpenHarmony.NDK.Bindings.JSVM_CompileOptions.__Internal[] options, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CoerceToBigInt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CoerceToBigInt(__IntPtr env, __IntPtr value, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsRegExp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsRegExp(__IntPtr env, __IntPtr value, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsConstructor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsConstructor(__IntPtr env, __IntPtr value, bool* isConstructor);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateRegExp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateRegExp(__IntPtr env, __IntPtr value, global::OpenHarmony.NDK.Bindings.JSVM_RegExpFlags flags, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_ObjectGetPrototypeOf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ObjectGetPrototypeOf(__IntPtr env, __IntPtr @object, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_ObjectSetPrototypeOf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ObjectSetPrototypeOf(__IntPtr env, __IntPtr @object, __IntPtr prototype);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateFunctionWithScript", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateFunctionWithScript(__IntPtr env, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string funcName, ulong length, ulong argc, __IntPtr argv, __IntPtr script, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_RetainScript", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_RetainScript(__IntPtr env, __IntPtr script);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_ReleaseScript", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ReleaseScript(__IntPtr env, __IntPtr script);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_OpenInspectorWithName", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_OpenInspectorWithName(__IntPtr env, int pid, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CompileWasmModule", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CompileWasmModule(__IntPtr env, byte* wasmBytecode, ulong wasmBytecodeLength, byte* cacheData, ulong cacheDataLength, bool* cacheRejected, __IntPtr wasmModule);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CompileWasmFunction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CompileWasmFunction(__IntPtr env, __IntPtr wasmModule, uint functionIndex, global::OpenHarmony.NDK.Bindings.JSVM_WasmOptLevel optLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsWasmModuleObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsWasmModuleObject(__IntPtr env, __IntPtr value, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateWasmCache", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateWasmCache(__IntPtr env, __IntPtr wasmModule, byte** data, ulong* length);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_ReleaseCache", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ReleaseCache(__IntPtr env, byte* cacheData, global::OpenHarmony.NDK.Bindings.JSVM_CacheType cacheType);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateExternalStringLatin1", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateExternalStringLatin1(__IntPtr env, sbyte* str, ulong length, __IntPtr finalizeCallback, __IntPtr finalizeHint, __IntPtr result, bool* copied);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateExternalStringUtf16", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateExternalStringUtf16(__IntPtr env, char* str, ulong length, __IntPtr finalizeCallback, __IntPtr finalizeHint, __IntPtr result, bool* copied);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreatePrivate", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreatePrivate(__IntPtr env, __IntPtr description, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_SetPrivate", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_SetPrivate(__IntPtr env, __IntPtr @object, __IntPtr key, __IntPtr value);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetPrivate", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetPrivate(__IntPtr env, __IntPtr @object, __IntPtr key, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_DeletePrivate", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DeletePrivate(__IntPtr env, __IntPtr @object, __IntPtr key);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_CreateDataReference", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateDataReference(__IntPtr env, __IntPtr data, uint initialRefcount, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetReferenceData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetReferenceData(__IntPtr env, __IntPtr @ref, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsBigIntObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsBigIntObject(__IntPtr env, __IntPtr value, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsBooleanObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsBooleanObject(__IntPtr env, __IntPtr value, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsStringObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsStringObject(__IntPtr env, __IntPtr value, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsNumberObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsNumberObject(__IntPtr env, __IntPtr value, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_IsSymbolObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsSymbolObject(__IntPtr env, __IntPtr value, bool* result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetSymbolAsyncIterator", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolAsyncIterator(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetSymbolHasInstance", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolHasInstance(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetSymbolIsConcatSpreadable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolIsConcatSpreadable(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetSymbolMatch", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolMatch(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetSymbolReplace", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolReplace(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetSymbolSearch", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolSearch(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetSymbolSplit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolSplit(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetSymbolToPrimitive", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolToPrimitive(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetSymbolUnscopables", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolUnscopables(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetSymbolToStringTag", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolToStringTag(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_GetSymbolIterator", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolIterator(__IntPtr env, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_TraceStart", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_TraceStart(ulong count, global::OpenHarmony.NDK.Bindings.JSVM_TraceCategory* categories, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string tag, ulong eventsCount);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_TraceStop", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_TraceStop(__IntPtr stream, __IntPtr streamData);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_SetHandlerForOOMError", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_SetHandlerForOOMError(__IntPtr vm, __IntPtr handler);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_SetHandlerForFatalError", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_SetHandlerForFatalError(__IntPtr vm, __IntPtr handler);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_SetHandlerForPromiseReject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_SetHandlerForPromiseReject(__IntPtr vm, __IntPtr handler);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_DefineClassWithOptions", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DefineClassWithOptions(__IntPtr env, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string utf8name, ulong length, __IntPtr constructor, ulong propertyCount, __IntPtr properties, __IntPtr parentClass, ulong option_count, global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptions.__Internal[] options, __IntPtr result);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_AddHandlerForGC", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_AddHandlerForGC(__IntPtr vm, global::OpenHarmony.NDK.Bindings.JSVM_CBTriggerTimeForGC triggerTime, __IntPtr handler, global::OpenHarmony.NDK.Bindings.JSVM_GCType gcType, __IntPtr userData);

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "OH_JSVM_RemoveHandlerForGC", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_RemoveHandlerForGC(__IntPtr vm, global::OpenHarmony.NDK.Bindings.JSVM_CBTriggerTimeForGC triggerTime, __IntPtr handler, __IntPtr userData);
        }

        /// <summary>Init a JavaScript vm.</summary>
        /// <param name="options">The options for initialize the JavaScript VM.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>Returns {</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_Init(global::OpenHarmony.NDK.Bindings.JSVM_InitOptions options)
        {
            var __arg0 = options is null ? __IntPtr.Zero : options.__Instance;
            var ___ret = __Internal.OH_JSVM_Init(__arg0);
            return ___ret;
        }

        /// <summary>This API create a new VM instance.</summary>
        /// <param name="options">The options for create the VM instance.</param>
        /// <param name="result">The new VM instance.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateVM(global::OpenHarmony.NDK.Bindings.JSVM_CreateVMOptions options, global::OpenHarmony.NDK.Bindings.JSVM_VM_ result)
        {
            var __arg0 = options is null ? __IntPtr.Zero : options.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_CreateVM(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>
        /// <para>This function controls how Microtasks are invoked of the vm. If the method is not</para>
        /// <para>called, the default microtask policy of vm is JSVM_MicrotaskPolicy::JSVM_MICROTASK_AUTO.</para>
        /// </summary>
        /// <param name="vm">The VM instance to set mircrotasks policy.</param>
        /// <param name="policy">Policy for running microtasks.</param>
        /// <returns>Returns JSVM_OK if the API succeeded.</returns>
        /// <remarks>18</remarks>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_SetMicrotaskPolicy(global::OpenHarmony.NDK.Bindings.JSVM_VM_ vm, global::OpenHarmony.NDK.Bindings.JSVM_MicrotaskPolicy policy)
        {
            var __arg0 = vm is null ? __IntPtr.Zero : vm.__Instance;
            var ___ret = __Internal.OH_JSVM_SetMicrotaskPolicy(__arg0, policy);
            return ___ret;
        }

        /// <summary>Destroys VM instance.</summary>
        /// <param name="vm">The VM instance to be Destroyed.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DestroyVM(global::OpenHarmony.NDK.Bindings.JSVM_VM_ vm)
        {
            var __arg0 = vm is null ? __IntPtr.Zero : vm.__Instance;
            var ___ret = __Internal.OH_JSVM_DestroyVM(__arg0);
            return ___ret;
        }

        /// <summary>
        /// <para>This API allocates a default JavaScript Proxy. It is the equivalent of</para>
        /// <para>doing new Proxy(target, handler) in JavaScript.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="target">A JSVM_Value representing the JavaScript Object which you want to proxy.</param>
        /// <param name="handler">
        /// <para>A JSVM_Value representing the JavaScript Object that defines which</para>
        /// <para>operations will be intercepted and how to redefine intercepted operations.</para>
        /// </param>
        /// <param name="result">A JSVM_Value representing a JavaScript Proxy.</param>
        /// <returns>
        /// <para>Returns JSVM functions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateProxy(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value target, global::OpenHarmony.NDK.Bindings.JSVM_Value handler, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = target is null ? __IntPtr.Zero : target.__Instance;
            var __arg2 = handler is null ? __IntPtr.Zero : handler.__Instance;
            var ____arg3 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg3 = new __IntPtr(&____arg3);
            var ___ret = __Internal.OH_JSVM_CreateProxy(__arg0, __arg1, __arg2, __arg3);
            return ___ret;
        }

        /// <summary>This API checks if the value passed in is a Proxy.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="isProxy">Whether the given value is Proxy.</param>
        /// <returns>
        /// <para>Returns JSVM functions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsProxy(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool isProxy)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __isProxy2 = &isProxy)
            {
                var __arg2 = __isProxy2;
                var ___ret = __Internal.OH_JSVM_IsProxy(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>This API gets target from proxy.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">JSVM_Value representing JavaScript Proxy whose target to return.</param>
        /// <param name="result">Target of the given proxy.</param>
        /// <returns>
        /// <para>Returns JSVM functions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ProxyGetTarget(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_ProxyGetTarget(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>This API open a new VM scope for the VM instance.</summary>
        /// <param name="vm">The VM instance to open scope for.</param>
        /// <param name="result">The new VM scope.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_OpenVMScope(global::OpenHarmony.NDK.Bindings.JSVM_VM_ vm, global::OpenHarmony.NDK.Bindings.JSVM_VMScope result)
        {
            var __arg0 = vm is null ? __IntPtr.Zero : vm.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_OpenVMScope(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This function close the VM scope for the VM instance.</summary>
        /// <param name="vm">The VM instance to close scope for.</param>
        /// <param name="scope">The VM scope to be closed.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CloseVMScope(global::OpenHarmony.NDK.Bindings.JSVM_VM_ vm, global::OpenHarmony.NDK.Bindings.JSVM_VMScope scope)
        {
            var __arg0 = vm is null ? __IntPtr.Zero : vm.__Instance;
            var __arg1 = scope is null ? __IntPtr.Zero : scope.__Instance;
            var ___ret = __Internal.OH_JSVM_CloseVMScope(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This function create a new environment with optional properties for the context of the new environment.</summary>
        /// <param name="vm">The VM instance that the env will be created in.</param>
        /// <param name="propertyCount">The number of elements in the properties array.</param>
        /// <param name="properties">The array of property descriptor.</param>
        /// <param name="result">The new environment created.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateEnv(global::OpenHarmony.NDK.Bindings.JSVM_VM_ vm, ulong propertyCount, global::OpenHarmony.NDK.Bindings.JSVM_PropertyDescriptor properties, global::OpenHarmony.NDK.Bindings.JSVM_Env result)
        {
            var __arg0 = vm is null ? __IntPtr.Zero : vm.__Instance;
            var __arg2 = properties is null ? __IntPtr.Zero : properties.__Instance;
            var ____arg3 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg3 = new __IntPtr(&____arg3);
            var ___ret = __Internal.OH_JSVM_CreateEnv(__arg0, propertyCount, __arg2, __arg3);
            return ___ret;
        }

        /// <summary>This function create a new environment from the start snapshot of the vm.</summary>
        /// <param name="vm">The VM instance that the env will be created in.</param>
        /// <param name="index">The index of the environment in the snapshot.</param>
        /// <param name="result">The new environment created.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateEnvFromSnapshot(global::OpenHarmony.NDK.Bindings.JSVM_VM_ vm, ulong index, global::OpenHarmony.NDK.Bindings.JSVM_Env result)
        {
            var __arg0 = vm is null ? __IntPtr.Zero : vm.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_CreateEnvFromSnapshot(__arg0, index, __arg2);
            return ___ret;
        }

        /// <summary>This function destroys the environment.</summary>
        /// <param name="env">The environment to be destroyed.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DestroyEnv(global::OpenHarmony.NDK.Bindings.JSVM_Env env)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ___ret = __Internal.OH_JSVM_DestroyEnv(__arg0);
            return ___ret;
        }

        /// <summary>This function open a new environment scope.</summary>
        /// <param name="env">The environment that the JSVM-API call is invoked under.</param>
        /// <param name="result">The new environment scope.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_OpenEnvScope(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_EnvScope result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_OpenEnvScope(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This function closes the environment scope of the environment.</summary>
        /// <param name="env">The environment that the JSVM-API call is invoked under.</param>
        /// <param name="scope">The environment scope to be closed.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CloseEnvScope(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_EnvScope scope)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = scope is null ? __IntPtr.Zero : scope.__Instance;
            var ___ret = __Internal.OH_JSVM_CloseEnvScope(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This function retrieves the VM instance of the given environment.</summary>
        /// <param name="env">The environment that the JSVM-API call is invoked under.</param>
        /// <param name="result">The VM instance of the environment.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>Returns {</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetVM(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_VM_ result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_GetVM(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This function compiles a string of JavaScript code and returns the compiled script.</summary>
        /// <param name="env">The environment that the JSVM-API call is invoked under.</param>
        /// <param name="script">A JavaScript string containing the script yo be compiled.</param>
        /// <param name="cachedData">Optional code cache data for the script.</param>
        /// <param name="cacheDataLength">The length of cachedData array.</param>
        /// <param name="eagerCompile">Whether to compile the script eagerly.</param>
        /// <param name="cacheRejected">Whether the code cache rejected by compilation.</param>
        /// <param name="result">The compiled script.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CompileScript(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value script, byte* cachedData, ulong cacheDataLength, bool eagerCompile, ref bool cacheRejected, global::OpenHarmony.NDK.Bindings.JSVM_Script result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = script is null ? __IntPtr.Zero : script.__Instance;
            fixed (bool* __cacheRejected5 = &cacheRejected)
            {
                var __arg5 = __cacheRejected5;
                var ____arg6 = result is null ? __IntPtr.Zero : result.__Instance;
                var __arg6 = new __IntPtr(&____arg6);
                var ___ret = __Internal.OH_JSVM_CompileScript(__arg0, __arg1, cachedData, cacheDataLength, eagerCompile, __arg5, __arg6);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This function compiles a string of JavaScript code with the source code information</para>
        /// <para>and returns the compiled script.</para>
        /// </summary>
        /// <param name="env">The environment that the JSVM-API call is invoked under.</param>
        /// <param name="script">A JavaScript string containing the script to be compiled.</param>
        /// <param name="cachedData">Optional code cache data for the script.</param>
        /// <param name="cacheDataLength">The length of cachedData array.</param>
        /// <param name="eagerCompile">Whether to compile the script eagerly.</param>
        /// <param name="cacheRejected">Whether the code cache rejected by compilation.</param>
        /// <param name="origin">The information of source code.</param>
        /// <param name="result">The compiled script.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CompileScriptWithOrigin(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value script, byte* cachedData, ulong cacheDataLength, bool eagerCompile, ref bool cacheRejected, global::OpenHarmony.NDK.Bindings.JSVM_ScriptOrigin origin, global::OpenHarmony.NDK.Bindings.JSVM_Script result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = script is null ? __IntPtr.Zero : script.__Instance;
            fixed (bool* __cacheRejected5 = &cacheRejected)
            {
                var __arg5 = __cacheRejected5;
                var __arg6 = origin is null ? __IntPtr.Zero : origin.__Instance;
                var ____arg7 = result is null ? __IntPtr.Zero : result.__Instance;
                var __arg7 = new __IntPtr(&____arg7);
                var ___ret = __Internal.OH_JSVM_CompileScriptWithOrigin(__arg0, __arg1, cachedData, cacheDataLength, eagerCompile, __arg5, __arg6, __arg7);
                return ___ret;
            }
        }

        /// <summary>This function creates code cache for the compiled script.</summary>
        /// <param name="env">The environment that the JSVM-API call is invoked under.</param>
        /// <param name="script">A compiled script to create code cache for.</param>
        /// <param name="data">The data of the code cache.</param>
        /// <param name="length">The length of the code cache data.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateCodeCache(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Script script, byte** data, ref ulong length)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = script is null ? __IntPtr.Zero : script.__Instance;
            fixed (ulong* __length3 = &length)
            {
                var __arg3 = __length3;
                var ___ret = __Internal.OH_JSVM_CreateCodeCache(__arg0, __arg1, data, __arg3);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This function executes a string of JavaScript code and returns its result with the following caveats:</para>
        /// <para>Unlike eval, this function does not allow the script to access the current lexical scope, and therefore also</para>
        /// <para>does not allow to access the module scope, meaning that pseudo-globals such as require will not be available.</para>
        /// <para>The script can access the global scope. Function and var declarations in the script will be added to the</para>
        /// <para>global object. Variable declarations made using let and const will be visible globally, but will not be added</para>
        /// <para>to the global object.The value of this is global within the script.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="script">A JavaScript string containing the script to execute.</param>
        /// <param name="result">The value resulting from having executed the script.</param>
        /// <remarks>11</remarks>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_RunScript(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Script script, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = script is null ? __IntPtr.Zero : script.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_RunScript(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>
        /// <para>This API associates data with the currently running JSVM environment. data can later be retrieved</para>
        /// <para>using OH_JSVM_GetInstanceData().</para>
        /// </summary>
        /// <param name="env">The environment that the JSVM-API call is invoked under.</param>
        /// <param name="data">The data item to make available to bindings of this instance.</param>
        /// <param name="finalizeCb">
        /// <para>The function to call when the environment is being torn down. The function receives</para>
        /// <para>data so that it might free it. JSVM_Finalize provides more details.</para>
        /// </param>
        /// <param name="finalizeHint">Optional hint to pass to the finalize callback during collection.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_SetInstanceData(global::OpenHarmony.NDK.Bindings.JSVM_Env env, __IntPtr data, global::OpenHarmony.NDK.Bindings.JSVM_Finalize finalizeCb, __IntPtr finalizeHint)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg2 = finalizeCb == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(finalizeCb);
            var ___ret = __Internal.OH_JSVM_SetInstanceData(__arg0, data, __arg2, finalizeHint);
            return ___ret;
        }

        /// <summary>
        /// <para>This API retrieves data that was previously associated with the currently running JSVM environment</para>
        /// <para>via OH_JSVM_SetInstanceData(). If no data is set, the call will succeed and data will be set to NULL.</para>
        /// </summary>
        /// <param name="env">The environment that the JSVM-API call is invoked under.</param>
        /// <param name="data">
        /// <para>The data item that was previously associated with the currently running JSVM environment by</para>
        /// <para>a call to OH_JSVM_SetInstanceData().</para>
        /// </param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetInstanceData(global::OpenHarmony.NDK.Bindings.JSVM_Env env, __IntPtr* data)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ___ret = __Internal.OH_JSVM_GetInstanceData(__arg0, data);
            return ___ret;
        }

        /// <summary>
        /// <para>This API retrieves a JSVM_ExtendedErrorInfo structure with information about the last error that</para>
        /// <para>occurred.</para>
        /// </summary>
        /// <param name="env">The environment that the JSVM-API call is invoked under.</param>
        /// <param name="result">The JSVM_ExtendedErrorInfo structure with more information about the error.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetLastErrorInfo(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_ExtendedErrorInfo result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_GetLastErrorInfo(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This API throws the JavaScript value provided.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="error">The JavaScript value to be thrown.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_Throw(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value error)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = error is null ? __IntPtr.Zero : error.__Instance;
            var ___ret = __Internal.OH_JSVM_Throw(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This API throws a JavaScript Error with the text provided.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="code">Optional error code to be set on the error.</param>
        /// <param name="msg">C string representing the text to be associated with the error.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ThrowError(global::OpenHarmony.NDK.Bindings.JSVM_Env env, string code, string msg)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ___ret = __Internal.OH_JSVM_ThrowError(__arg0, code, msg);
            return ___ret;
        }

        /// <summary>This API throws a JavaScript TypeError with the text provided.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="code">Optional error code to be set on the error.</param>
        /// <param name="msg">C string representing the text to be associated with the error.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ThrowTypeError(global::OpenHarmony.NDK.Bindings.JSVM_Env env, string code, string msg)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ___ret = __Internal.OH_JSVM_ThrowTypeError(__arg0, code, msg);
            return ___ret;
        }

        /// <summary>This API throws a JavaScript RangeError with the text provided.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="code">Optional error code to be set on the error.</param>
        /// <param name="msg">C string representing the text to be associated with the error.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ThrowRangeError(global::OpenHarmony.NDK.Bindings.JSVM_Env env, string code, string msg)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ___ret = __Internal.OH_JSVM_ThrowRangeError(__arg0, code, msg);
            return ___ret;
        }

        /// <summary>This API throws a JavaScript SyntaxError with the text provided.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="code">Optional error code to be set on the error.</param>
        /// <param name="msg">C string representing the text to be associated with the error.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ThrowSyntaxError(global::OpenHarmony.NDK.Bindings.JSVM_Env env, string code, string msg)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ___ret = __Internal.OH_JSVM_ThrowSyntaxError(__arg0, code, msg);
            return ___ret;
        }

        /// <summary>This API queries a JSVM_Value to check if it represents an error object.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JSVM_Value to be checked.</param>
        /// <param name="result">
        /// <para>Boolean value that is set to true if JSVM_Value represents an error,</para>
        /// <para>false otherwise.</para>
        /// </param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsError(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_IsError(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>This API returns a JavaScript Error with the text provided.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="code">Optional JSVM_Value with the string for the error code to be associated with the error.</param>
        /// <param name="msg">JSVM_Value that references a JavaScript string to be used as the message for the Error.</param>
        /// <param name="result">JSVM_Value representing the error created.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateError(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value code, global::OpenHarmony.NDK.Bindings.JSVM_Value msg, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = code is null ? __IntPtr.Zero : code.__Instance;
            var __arg2 = msg is null ? __IntPtr.Zero : msg.__Instance;
            var ____arg3 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg3 = new __IntPtr(&____arg3);
            var ___ret = __Internal.OH_JSVM_CreateError(__arg0, __arg1, __arg2, __arg3);
            return ___ret;
        }

        /// <summary>This API returns a JavaScript TypeError with the text provided.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="code">Optional JSVM_Value with the string for the error code to be associated with the error.</param>
        /// <param name="msg">JSVM_Value that references a JavaScript string to be used as the message for the Error.</param>
        /// <param name="result">JSVM_Value representing the error created.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateTypeError(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value code, global::OpenHarmony.NDK.Bindings.JSVM_Value msg, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = code is null ? __IntPtr.Zero : code.__Instance;
            var __arg2 = msg is null ? __IntPtr.Zero : msg.__Instance;
            var ____arg3 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg3 = new __IntPtr(&____arg3);
            var ___ret = __Internal.OH_JSVM_CreateTypeError(__arg0, __arg1, __arg2, __arg3);
            return ___ret;
        }

        /// <summary>This API returns a JavaScript RangeError with the text provided.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="code">Optional JSVM_Value with the string for the error code to be associated with the error.</param>
        /// <param name="msg">JSVM_Value that references a JavaScript string to be used as the message for the Error.</param>
        /// <param name="result">JSVM_Value representing the error created.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateRangeError(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value code, global::OpenHarmony.NDK.Bindings.JSVM_Value msg, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = code is null ? __IntPtr.Zero : code.__Instance;
            var __arg2 = msg is null ? __IntPtr.Zero : msg.__Instance;
            var ____arg3 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg3 = new __IntPtr(&____arg3);
            var ___ret = __Internal.OH_JSVM_CreateRangeError(__arg0, __arg1, __arg2, __arg3);
            return ___ret;
        }

        /// <summary>This API returns a JavaScript SyntaxError with the text provided.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="code">Optional JSVM_Value with the string for the error code to be associated with the error.</param>
        /// <param name="msg">JSVM_Value that references a JavaScript string to be used as the message for the Error.</param>
        /// <param name="result">JSVM_Value representing the error created.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateSyntaxError(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value code, global::OpenHarmony.NDK.Bindings.JSVM_Value msg, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = code is null ? __IntPtr.Zero : code.__Instance;
            var __arg2 = msg is null ? __IntPtr.Zero : msg.__Instance;
            var ____arg3 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg3 = new __IntPtr(&____arg3);
            var ___ret = __Internal.OH_JSVM_CreateSyntaxError(__arg0, __arg1, __arg2, __arg3);
            return ___ret;
        }

        /// <summary>This API returns a JavaScript exception if one is pending, NULL otherwise.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">The exception if one is pending, NULL otherwise.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetAndClearLastException(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_GetAndClearLastException(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This API returns true if an exception is pending, false otherwise.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">Boolean value that is set to true if an exception is pending.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsExceptionPending(global::OpenHarmony.NDK.Bindings.JSVM_Env env, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            fixed (bool* __result1 = &result)
            {
                var __arg1 = __result1;
                var ___ret = __Internal.OH_JSVM_IsExceptionPending(__arg0, __arg1);
                return ___ret;
            }
        }

        /// <summary>This API opens a new scope.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">JSVM_Value representing the new scope.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_OpenHandleScope(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_HandleScope result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_OpenHandleScope(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>
        /// <para>This API closes the scope passed in. Scopes must be closed in the reverse</para>
        /// <para>order from which they were created.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="scope">JSVM_Value representing the scope to be closed.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CloseHandleScope(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_HandleScope scope)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = scope is null ? __IntPtr.Zero : scope.__Instance;
            var ___ret = __Internal.OH_JSVM_CloseHandleScope(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This API opens a new scope from which one object can be promoted to the outer scope.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">JSVM_Value representing the new scope.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_OpenEscapableHandleScope(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_EscapableHandleScope result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_OpenEscapableHandleScope(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>
        /// <para>This API closes the scope passed in. Scopes must be closed in the reverse order</para>
        /// <para>from which they were created.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="scope">JSVM_Value representing the scope to be closed.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CloseEscapableHandleScope(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_EscapableHandleScope scope)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = scope is null ? __IntPtr.Zero : scope.__Instance;
            var ___ret = __Internal.OH_JSVM_CloseEscapableHandleScope(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>
        /// <para>This API promotes the handle to the JavaScript object so that it is valid for the lifetime</para>
        /// <para>of the outer scope. It can only be called once per scope. If it is called more than once an error</para>
        /// <para>will be returned.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="scope">JSVM_Value representing the current scope.</param>
        /// <param name="escapee">JSVM_Value representing the JavaScript Object to be escaped.</param>
        /// <param name="result">JSVM_Value representing the handle to the escaped Object in the outer scope.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_EscapeHandle(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_EscapableHandleScope scope, global::OpenHarmony.NDK.Bindings.JSVM_Value escapee, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = scope is null ? __IntPtr.Zero : scope.__Instance;
            var __arg2 = escapee is null ? __IntPtr.Zero : escapee.__Instance;
            var ____arg3 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg3 = new __IntPtr(&____arg3);
            var ___ret = __Internal.OH_JSVM_EscapeHandle(__arg0, __arg1, __arg2, __arg3);
            return ___ret;
        }

        /// <summary>This API creates a new reference with the specified reference count to the value passed in.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JSVM_Value for which a reference is being created.</param>
        /// <param name="initialRefcount">Initial reference count for the new reference.</param>
        /// <param name="result">JSVM_Ref pointing to the new reference.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateReference(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, uint initialRefcount, global::OpenHarmony.NDK.Bindings.JSVM_Ref result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            var ____arg3 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg3 = new __IntPtr(&____arg3);
            var ___ret = __Internal.OH_JSVM_CreateReference(__arg0, __arg1, initialRefcount, __arg3);
            return ___ret;
        }

        /// <summary>his API deletes the reference passed in.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="ref">JSVM_Ref to be deleted.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DeleteReference(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Ref @ref)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @ref is null ? __IntPtr.Zero : @ref.__Instance;
            var ___ret = __Internal.OH_JSVM_DeleteReference(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>
        /// <para>his API increments the reference count for the reference passed in and</para>
        /// <para>returns the resulting reference count.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="ref">JSVM_Ref for which the reference count will be incremented.</param>
        /// <param name="result">The new reference count.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ReferenceRef(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Ref @ref, ref uint result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @ref is null ? __IntPtr.Zero : @ref.__Instance;
            fixed (uint* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_ReferenceRef(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This API decrements the reference count for the reference passed in and</para>
        /// <para>returns the resulting reference count.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="ref">JSVM_Ref for which the reference count will be decremented.</param>
        /// <param name="result">The new reference count.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ReferenceUnref(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Ref @ref, ref uint result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @ref is null ? __IntPtr.Zero : @ref.__Instance;
            fixed (uint* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_ReferenceUnref(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>If still valid, this API returns the JSVM_Value representing the</para>
        /// <para>JavaScript value associated with the JSVM_Ref. Otherwise, result will be NULL.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="ref">The JSVM_Ref for which the corresponding value is being requested.</param>
        /// <param name="result">The JSVM_Value referenced by the JSVM_Ref.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetReferenceValue(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Ref @ref, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @ref is null ? __IntPtr.Zero : @ref.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_GetReferenceValue(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>This API returns a JSVM-API value corresponding to a JavaScript Array type.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript Array.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateArray(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_CreateArray(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>
        /// <para>This API returns a JSVM-API value corresponding to a JavaScript Array type. The Array's length property</para>
        /// <para>is set to the passed-in length parameter. However, the underlying buffer is not guaranteed to be pre-allocated</para>
        /// <para>by the VM when the array is created. That behavior is left to the underlying VM implementation.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="length">The initial length of the Array.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript Array.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateArrayWithLength(global::OpenHarmony.NDK.Bindings.JSVM_Env env, ulong length, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_CreateArrayWithLength(__arg0, length, __arg2);
            return ___ret;
        }

        /// <summary>
        /// <para>This API returns a JSVM-API value corresponding to a JavaScript ArrayBuffer. ArrayBuffers are used to</para>
        /// <para>represent fixed-length binary data buffers. They are normally used as a backing-buffer for TypedArray objects.</para>
        /// <para>The ArrayBuffer allocated will have an underlying byte buffer whose size is determined by the length parameter</para>
        /// <para>that's passed in. The underlying buffer is optionally returned back to the caller in case the caller wants to</para>
        /// <para>directly manipulate the buffer. This buffer can only be written to directly from native code. To write to this</para>
        /// <para>buffer from JavaScript, a typed array or DataView object would need to be created.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="byteLength">The length in bytes of the array buffer to create.</param>
        /// <param name="data">Pointer to the underlying byte buffer of the ArrayBuffer.data can optionally be ignored by passing NULL.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript Array.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateArraybuffer(global::OpenHarmony.NDK.Bindings.JSVM_Env env, ulong byteLength, __IntPtr* data, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg3 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg3 = new __IntPtr(&____arg3);
            var ___ret = __Internal.OH_JSVM_CreateArraybuffer(__arg0, byteLength, data, __arg3);
            return ___ret;
        }

        /// <summary>This API allocate the memory of array buffer backing store.</summary>
        /// <param name="byteLength">size of backing store memory.</param>
        /// <param name="initialized">initialization status of the backing store memory.</param>
        /// <param name="data">pointer that recieve the backing store memory pointer.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>Returns {</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_AllocateArrayBufferBackingStoreData(ulong byteLength, global::OpenHarmony.NDK.Bindings.JSVM_InitializedFlag initialized, __IntPtr* data)
        {
            var ___ret = __Internal.OH_JSVM_AllocateArrayBufferBackingStoreData(byteLength, initialized, data);
            return ___ret;
        }

        /// <summary>This API release the memory of an array buffer backing store.</summary>
        /// <param name="data">pointer to the backing store memory.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>Returns {</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_FreeArrayBufferBackingStoreData(__IntPtr data)
        {
            var ___ret = __Internal.OH_JSVM_FreeArrayBufferBackingStoreData(data);
            return ___ret;
        }

        /// <summary>This API create an array buffer using the backing store data.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="data">pointer to the backing store memory.</param>
        /// <param name="backingStoreSize">size of backing store memory.</param>
        /// <param name="offset">start position of the array buffer in the backing store memory.</param>
        /// <param name="arrayBufferSize">size of the array buffer.</param>
        /// <param name="result">pointer that recieve the array buffer.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>Returns {</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateArrayBufferFromBackingStoreData(global::OpenHarmony.NDK.Bindings.JSVM_Env env, __IntPtr data, ulong backingStoreSize, ulong offset, ulong arrayBufferSize, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg5 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg5 = new __IntPtr(&____arg5);
            var ___ret = __Internal.OH_JSVM_CreateArrayBufferFromBackingStoreData(__arg0, data, backingStoreSize, offset, arrayBufferSize, __arg5);
            return ___ret;
        }

        /// <summary>
        /// <para>This API does not observe leap seconds; they are ignored, as ECMAScript aligns with POSIX time specification.</para>
        /// <para>This API allocates a JavaScript Date object.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="time">ECMAScript time value in milliseconds since 01 January, 1970 UTC.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript Date.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateDate(global::OpenHarmony.NDK.Bindings.JSVM_Env env, double time, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_CreateDate(__arg0, time, __arg2);
            return ___ret;
        }

        /// <summary>
        /// <para>This API allocates a JavaScript value with external data attached to it. This is used to pass external</para>
        /// <para>data through JavaScript code, so it can be retrieved later by native code using OH_JSVM_GetValueExternal.</para>
        /// <para>The API adds a JSVM_Finalize callback which will be called when the JavaScript object just created has been garbage</para>
        /// <para>collected.The created value is not an object, and therefore does not support additional properties. It is considered</para>
        /// <para>a distinct value type calling OH_JSVM_Typeof() with an external value yields JSVM_EXTERNAL.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="data">Raw pointer to the external data.</param>
        /// <param name="finalizeCb">
        /// <para>Optional callback to call when the external value is being collected. JSVM_Finalize provides</para>
        /// <para>more details.</para>
        /// </param>
        /// <param name="finalizeHint">Optional hint to pass to the finalize callback during collection.</param>
        /// <param name="result">A JSVM_Value representing an external value.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateExternal(global::OpenHarmony.NDK.Bindings.JSVM_Env env, __IntPtr data, global::OpenHarmony.NDK.Bindings.JSVM_Finalize finalizeCb, __IntPtr finalizeHint, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg2 = finalizeCb == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(finalizeCb);
            var ____arg4 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg4 = new __IntPtr(&____arg4);
            var ___ret = __Internal.OH_JSVM_CreateExternal(__arg0, data, __arg2, finalizeHint, __arg4);
            return ___ret;
        }

        /// <summary>This API allocates a default JavaScript Object. It is the equivalent of doing new Object() in JavaScript.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript Object.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateObject(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_CreateObject(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This API creates a JavaScript symbol value from a UTF8-encoded C string.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="description">
        /// <para>Optional JSVM_Value which refers to a JavaScript string to be set as the description</para>
        /// <para>for the symbol.</para>
        /// </param>
        /// <param name="result">A JSVM_Value representing a JavaScript symbol.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateSymbol(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value description, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = description is null ? __IntPtr.Zero : description.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_CreateSymbol(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>
        /// <para>This API searches in the global registry for an existing symbol with the given description.</para>
        /// <para>If the symbol already exists it will be returned, otherwise a new symbol will be created in the registry.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="utf8description">UTF-8 C string representing the text to be used as the description for the symbol.</param>
        /// <param name="length">The length of the description string in bytes, or JSVM_AUTO_LENGTH if it is null-terminated.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript symbol.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_SymbolFor(global::OpenHarmony.NDK.Bindings.JSVM_Env env, string utf8description, ulong length, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg3 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg3 = new __IntPtr(&____arg3);
            var ___ret = __Internal.OH_JSVM_SymbolFor(__arg0, utf8description, length, __arg3);
            return ___ret;
        }

        /// <summary>
        /// <para>This API creates a JavaScript TypedArray object over an existing ArrayBuffer. TypedArray</para>
        /// <para>objects provide an array-like view over an underlying data buffer where each element has the</para>
        /// <para>same underlying binary scalar datatype.It's required that (length * size_of_element) + byte_offset should</para>
        /// <para>be&lt;= the size in bytes of the array passed in. If not, a RangeError exception is raised.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="type">Scalar datatype of the elements within the TypedArray.</param>
        /// <param name="length">Number of elements in the TypedArray.</param>
        /// <param name="arraybuffer">ArrayBuffer underlying the typed array.</param>
        /// <param name="byteOffset">The byte offset within the ArrayBuffer from which to start projecting the TypedArray.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript TypedArray</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateTypedarray(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_TypedarrayType type, ulong length, global::OpenHarmony.NDK.Bindings.JSVM_Value arraybuffer, ulong byteOffset, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg3 = arraybuffer is null ? __IntPtr.Zero : arraybuffer.__Instance;
            var ____arg5 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg5 = new __IntPtr(&____arg5);
            var ___ret = __Internal.OH_JSVM_CreateTypedarray(__arg0, type, length, __arg3, byteOffset, __arg5);
            return ___ret;
        }

        /// <summary>
        /// <para>This API creates a JavaScript DataView object over an existing ArrayBuffer. DataView</para>
        /// <para>objects provide an array-like view over an underlying data buffer, but one which allows items</para>
        /// <para>of different size and type in the ArrayBuffer.It is required that byte_length + byte_offset is</para>
        /// <para>less than or equal to the size in bytes of the array passed in. If not, a RangeError exception</para>
        /// <para>is raised.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="length">Number of elements in the DataView.</param>
        /// <param name="arraybuffer">ArrayBuffer underlying the DataView.</param>
        /// <param name="byteOffset">The byte offset within the ArrayBuffer from which to start projecting the DataView.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript DataView.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateDataview(global::OpenHarmony.NDK.Bindings.JSVM_Env env, ulong length, global::OpenHarmony.NDK.Bindings.JSVM_Value arraybuffer, ulong byteOffset, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg2 = arraybuffer is null ? __IntPtr.Zero : arraybuffer.__Instance;
            var ____arg4 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg4 = new __IntPtr(&____arg4);
            var ___ret = __Internal.OH_JSVM_CreateDataview(__arg0, length, __arg2, byteOffset, __arg4);
            return ___ret;
        }

        /// <summary>This API is used to convert from the C int32_t type to the JavaScript number type.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">Integer value to be represented in JavaScript.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript number.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateInt32(global::OpenHarmony.NDK.Bindings.JSVM_Env env, int value, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_CreateInt32(__arg0, value, __arg2);
            return ___ret;
        }

        /// <summary>This API is used to convert from the C uint32_t type to the JavaScript number type.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">Unsigned integer value to be represented in JavaScript.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript number.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateUint32(global::OpenHarmony.NDK.Bindings.JSVM_Env env, uint value, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_CreateUint32(__arg0, value, __arg2);
            return ___ret;
        }

        /// <summary>This API is used to convert from the C int64_t type to the JavaScript number type.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">Integer value to be represented in JavaScript.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript number.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateInt64(global::OpenHarmony.NDK.Bindings.JSVM_Env env, long value, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_CreateInt64(__arg0, value, __arg2);
            return ___ret;
        }

        /// <summary>This API is used to convert from the C double type to the JavaScript number type.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">Double-precision value to be represented in JavaScript.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript number.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateDouble(global::OpenHarmony.NDK.Bindings.JSVM_Env env, double value, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_CreateDouble(__arg0, value, __arg2);
            return ___ret;
        }

        /// <summary>This API converts the C int64_t type to the JavaScript BigInt type.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">Integer value to be represented in JavaScript.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript BigInt.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateBigintInt64(global::OpenHarmony.NDK.Bindings.JSVM_Env env, long value, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_CreateBigintInt64(__arg0, value, __arg2);
            return ___ret;
        }

        /// <summary>This API converts the C uint64_t type to the JavaScript BigInt type.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">Unsigned integer value to be represented in JavaScript.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript BigInt.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateBigintUint64(global::OpenHarmony.NDK.Bindings.JSVM_Env env, ulong value, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_CreateBigintUint64(__arg0, value, __arg2);
            return ___ret;
        }

        /// <summary>
        /// <para>This API converts an array of unsigned 64-bit words into a single BigInt value.</para>
        /// <para>The resulting BigInt is calculated as (–1)sign_bit (words[0] &#215; (264)0 + words[1] &#215; (264)1 + …)</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="signBit">Determines if the resulting BigInt will be positive or negative.</param>
        /// <param name="wordCount">The length of the words array.</param>
        /// <param name="words">An array of uint64_t little-endian 64-bit words.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript BigInt.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateBigintWords(global::OpenHarmony.NDK.Bindings.JSVM_Env env, int signBit, ulong wordCount, ref ulong words, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            fixed (ulong* __words3 = &words)
            {
                var __arg3 = __words3;
                var ____arg4 = result is null ? __IntPtr.Zero : result.__Instance;
                var __arg4 = new __IntPtr(&____arg4);
                var ___ret = __Internal.OH_JSVM_CreateBigintWords(__arg0, signBit, wordCount, __arg3, __arg4);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This API creates a JavaScript string value from an ISO-8859-1-encoded C</para>
        /// <para>string. The native string is copied.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="str">Character buffer representing an ISO-8859-1-encoded string.</param>
        /// <param name="length">The length of the string in bytes, or JSVM_AUTO_LENGTH if it is null-terminated.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript string.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateStringLatin1(global::OpenHarmony.NDK.Bindings.JSVM_Env env, string str, ulong length, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg3 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg3 = new __IntPtr(&____arg3);
            var ___ret = __Internal.OH_JSVM_CreateStringLatin1(__arg0, str, length, __arg3);
            return ___ret;
        }

        /// <summary>
        /// <para>This API creates a JavaScript string value from a UTF16-LE-encoded C</para>
        /// <para>string. The native string is copied.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="str">Character buffer representing a UTF16-LE-encoded string.</param>
        /// <param name="length">
        /// <para>The length of the string in two-byte code units, or JSVM_AUTO_LENGTH</para>
        /// <para>if it is null-terminated.</para>
        /// </param>
        /// <param name="result">A JSVM_Value representing a JavaScript string.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateStringUtf16(global::OpenHarmony.NDK.Bindings.JSVM_Env env, string str, ulong length, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg3 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg3 = new __IntPtr(&____arg3);
            var ___ret = __Internal.OH_JSVM_CreateStringUtf16(__arg0, str, length, __arg3);
            return ___ret;
        }

        /// <summary>
        /// <para>This API creates a JavaScript string value from a UTF8-encoded C</para>
        /// <para>string. The native string is copied.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="str">Character buffer representing a UTF8-encoded string.</param>
        /// <param name="length">The length of the string in bytes, or JSVM_AUTO_LENGTH if it is null-terminated.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript string.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateStringUtf8(global::OpenHarmony.NDK.Bindings.JSVM_Env env, string str, ulong length, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg3 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg3 = new __IntPtr(&____arg3);
            var ___ret = __Internal.OH_JSVM_CreateStringUtf8(__arg0, str, length, __arg3);
            return ___ret;
        }

        /// <summary>This API returns the length of an array.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">JSVM_Value representing the JavaScript Array whose length is being queried.</param>
        /// <param name="result">uint32 representing length of the array.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetArrayLength(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref uint result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (uint* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_GetArrayLength(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>This API is used to retrieve the underlying data buffer of an ArrayBuffer and its length.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="arraybuffer">JSVM_Value representing the ArrayBuffer being queried.</param>
        /// <param name="data">
        /// <para>The underlying data buffer of the ArrayBuffer. If byte_length is 0, this may be NULL</para>
        /// <para>or any other pointer value.</para>
        /// </param>
        /// <param name="byteLength">Length in bytes of the underlying data buffer.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetArraybufferInfo(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value arraybuffer, __IntPtr* data, ref ulong byteLength)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = arraybuffer is null ? __IntPtr.Zero : arraybuffer.__Instance;
            fixed (ulong* __byteLength3 = &byteLength)
            {
                var __arg3 = __byteLength3;
                var ___ret = __Internal.OH_JSVM_GetArraybufferInfo(__arg0, __arg1, data, __arg3);
                return ___ret;
            }
        }

        /// <summary>This API returns the length of an array.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">
        /// <para>JSVM_Value representing JavaScript Object whose prototype to return. This returns</para>
        /// <para>the equivalent of Object.getPrototypeOf (which is not the same as the function's prototype property).</para>
        /// </param>
        /// <param name="result">JSVM_Value representing prototype of the given object.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetPrototype(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_GetPrototype(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>This API returns various properties of a typed array.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="typedarray">JSVM_Value representing the TypedArray whose properties to query.</param>
        /// <param name="type">Scalar datatype of the elements within the TypedArray.</param>
        /// <param name="length">The number of elements in the TypedArray.</param>
        /// <param name="data">
        /// <para>The data buffer underlying the TypedArray adjusted by the byte_offset value so that it</para>
        /// <para>points to the first element in the TypedArray. If the length of the array is 0, this may be NULL or</para>
        /// <para>any other pointer value.</para>
        /// </param>
        /// <param name="arraybuffer">The ArrayBuffer underlying the TypedArray.</param>
        /// <param name="byteOffset">
        /// <para>The byte offset within the underlying native array at which the first element of</para>
        /// <para>the arrays is located. The value for the data parameter has already been adjusted so that data points</para>
        /// <para>to the first element in the array. Therefore, the first byte of the native array would be at data - byte_offset.</para>
        /// </param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetTypedarrayInfo(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value typedarray, ref global::OpenHarmony.NDK.Bindings.JSVM_TypedarrayType type, ref ulong length, __IntPtr* data, global::OpenHarmony.NDK.Bindings.JSVM_Value arraybuffer, ref ulong byteOffset)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = typedarray is null ? __IntPtr.Zero : typedarray.__Instance;
            fixed (global::OpenHarmony.NDK.Bindings.JSVM_TypedarrayType* __type2 = &type)
            {
                var __arg2 = __type2;
                fixed (ulong* __length3 = &length)
                {
                    var __arg3 = __length3;
                    var ____arg5 = arraybuffer is null ? __IntPtr.Zero : arraybuffer.__Instance;
                    var __arg5 = new __IntPtr(&____arg5);
                    fixed (ulong* __byteOffset6 = &byteOffset)
                    {
                        var __arg6 = __byteOffset6;
                        var ___ret = __Internal.OH_JSVM_GetTypedarrayInfo(__arg0, __arg1, __arg2, __arg3, data, __arg5, __arg6);
                        return ___ret;
                    }
                }
            }
        }

        /// <summary>
        /// <para>Any of the out parameters may be NULL if that property is unneeded.</para>
        /// <para>This API returns various properties of a DataView.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="dataview">JSVM_Value representing the DataView whose properties to query.</param>
        /// <param name="bytelength">Number of bytes in the DataView.</param>
        /// <param name="data">
        /// <para>The data buffer underlying the DataView.</para>
        /// <para>If byte_length is 0, this may be NULL or any other pointer value.</para>
        /// </param>
        /// <param name="arraybuffer">ArrayBuffer underlying the DataView.</param>
        /// <param name="byteOffset">The byte offset within the data buffer from which to start projecting the DataView.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetDataviewInfo(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value dataview, ref ulong bytelength, __IntPtr* data, global::OpenHarmony.NDK.Bindings.JSVM_Value arraybuffer, ref ulong byteOffset)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = dataview is null ? __IntPtr.Zero : dataview.__Instance;
            fixed (ulong* __bytelength2 = &bytelength)
            {
                var __arg2 = __bytelength2;
                var ____arg4 = arraybuffer is null ? __IntPtr.Zero : arraybuffer.__Instance;
                var __arg4 = new __IntPtr(&____arg4);
                fixed (ulong* __byteOffset5 = &byteOffset)
                {
                    var __arg5 = __byteOffset5;
                    var ___ret = __Internal.OH_JSVM_GetDataviewInfo(__arg0, __arg1, __arg2, data, __arg4, __arg5);
                    return ___ret;
                }
            }
        }

        /// <summary>
        /// <para>Returns JSVM_OK if the function executed successfully. If a non-date JSVM_Value is</para>
        /// <para>passed in it returns JSVM_date_expected.This API returns the C double</para>
        /// <para>primitive of time value for the given JavaScript Date.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">JSVM_Value representing a JavaScript Date.</param>
        /// <param name="result">
        /// <para>Time value as a double represented as milliseconds</para>
        /// <para>since midnight at the beginning of 01 January, 1970 UTC.</para>
        /// </param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetDateValue(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref double result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (double* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_GetDateValue(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>This API returns the C boolean primitive equivalent of the given JavaScript Boolean.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">JSVM_Value representing JavaScript Boolean.</param>
        /// <param name="result">C boolean primitive equivalent of the given JavaScript Boolean.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueBool(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_GetValueBool(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>This API returns the C double primitive equivalent of the given JavaScript number.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">JSVM_Value representing JavaScript number.</param>
        /// <param name="result">C double primitive equivalent of the given JavaScript number.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueDouble(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref double result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (double* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_GetValueDouble(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This API returns the C int64_t primitive equivalent of the given JavaScript BigInt.</para>
        /// <para>If needed it will truncate the value, setting lossless to false.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">JSVM_Value representing JavaScript BigInt.</param>
        /// <param name="result">C int64_t primitive equivalent of the given JavaScript BigInt.</param>
        /// <param name="lossless">Indicates whether the BigInt value was converted losslessly.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueBigintInt64(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref long result, ref bool lossless)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (long* __result2 = &result)
            {
                var __arg2 = __result2;
                fixed (bool* __lossless3 = &lossless)
                {
                    var __arg3 = __lossless3;
                    var ___ret = __Internal.OH_JSVM_GetValueBigintInt64(__arg0, __arg1, __arg2, __arg3);
                    return ___ret;
                }
            }
        }

        /// <summary>
        /// <para>This API returns the C uint64_t primitive equivalent of the given JavaScript BigInt.</para>
        /// <para>If needed it will truncate the value, setting lossless to false.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">JSVM_Value representing JavaScript BigInt.</param>
        /// <param name="result">C uint64_t primitive equivalent of the given JavaScript BigInt.</param>
        /// <param name="lossless">Indicates whether the BigInt value was converted losslessly.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueBigintUint64(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref ulong result, ref bool lossless)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (ulong* __result2 = &result)
            {
                var __arg2 = __result2;
                fixed (bool* __lossless3 = &lossless)
                {
                    var __arg3 = __lossless3;
                    var ___ret = __Internal.OH_JSVM_GetValueBigintUint64(__arg0, __arg1, __arg2, __arg3);
                    return ___ret;
                }
            }
        }

        /// <summary>
        /// <para>This API converts a single BigInt value into a sign bit, 64-bit little-endian array, and the number</para>
        /// <para>of elements in the array. signBit and words may be both set to NULL, in order to get only wordCount.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">JSVM_Value representing JavaScript BigInt.</param>
        /// <param name="signBit">Integer representing if the JavaScript BigInt is positive or negative.</param>
        /// <param name="wordCount">
        /// <para>Must be initialized to the length of the words array. Upon return, it will be set to</para>
        /// <para>the actual number of words that would be needed to store this BigInt.</para>
        /// </param>
        /// <param name="words">Pointer to a pre-allocated 64-bit word array.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueBigintWords(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref int signBit, ref ulong wordCount, ref ulong words)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (int* __signBit2 = &signBit)
            {
                var __arg2 = __signBit2;
                fixed (ulong* __wordCount3 = &wordCount)
                {
                    var __arg3 = __wordCount3;
                    fixed (ulong* __words4 = &words)
                    {
                        var __arg4 = __words4;
                        var ___ret = __Internal.OH_JSVM_GetValueBigintWords(__arg0, __arg1, __arg2, __arg3, __arg4);
                        return ___ret;
                    }
                }
            }
        }

        /// <summary>This API retrieves the external data pointer that was previously passed to OH_JSVM_CreateExternal().</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">JSVM_Value representing JavaScript external value.</param>
        /// <param name="result">Pointer to the data wrapped by the JavaScript external value.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueExternal(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, __IntPtr* result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            var ___ret = __Internal.OH_JSVM_GetValueExternal(__arg0, __arg1, result);
            return ___ret;
        }

        /// <summary>This API returns the C int32 primitive equivalent of the given JavaScript number.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">JSVM_Value representing JavaScript number.</param>
        /// <param name="result">C int32 primitive equivalent of the given JavaScript number.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueInt32(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref int result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (int* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_GetValueInt32(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>This API returns the C int64 primitive equivalent of the given JavaScript number.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">JSVM_Value representing JavaScript number.</param>
        /// <param name="result">C int64 primitive equivalent of the given JavaScript number.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueInt64(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref long result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (long* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_GetValueInt64(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>This API returns the ISO-8859-1-encoded string corresponding the value passed in.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">JSVM_Value representing JavaScript string.</param>
        /// <param name="buf">
        /// <para>Buffer to write the ISO-8859-1-encoded string into. If NULL is passed in, the</para>
        /// <para>length of the string in bytes and excluding the null terminator is returned in result.</para>
        /// </param>
        /// <param name="bufsize">
        /// <para>Size of the destination buffer. When this value is insufficient, the returned string</para>
        /// <para>is truncated and null-terminated.</para>
        /// </param>
        /// <param name="result">Number of bytes copied into the buffer, excluding the null terminator.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueStringLatin1(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, sbyte* buf, ulong bufsize, ref ulong result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (ulong* __result4 = &result)
            {
                var __arg4 = __result4;
                var ___ret = __Internal.OH_JSVM_GetValueStringLatin1(__arg0, __arg1, buf, bufsize, __arg4);
                return ___ret;
            }
        }

        /// <summary>This API returns the UTF8-encoded string corresponding the value passed in.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">JSVM_Value representing JavaScript string.</param>
        /// <param name="buf">
        /// <para>Buffer to write the UTF8-encoded string into. If NULL is passed in, the length</para>
        /// <para>of the string in bytes and excluding the null terminator is returned in result.</para>
        /// </param>
        /// <param name="bufsize">
        /// <para>Size of the destination buffer. When this value is insufficient, the returned</para>
        /// <para>string is truncated and null-terminated.</para>
        /// </param>
        /// <param name="result">Number of bytes copied into the buffer, excluding the null terminator.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueStringUtf8(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, sbyte* buf, ulong bufsize, ref ulong result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (ulong* __result4 = &result)
            {
                var __arg4 = __result4;
                var ___ret = __Internal.OH_JSVM_GetValueStringUtf8(__arg0, __arg1, buf, bufsize, __arg4);
                return ___ret;
            }
        }

        /// <summary>This API returns the UTF16-encoded string corresponding the value passed in.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">JSVM_Value representing JavaScript string.</param>
        /// <param name="buf">
        /// <para>Buffer to write the UTF16-LE-encoded string into. If NULL is passed in,</para>
        /// <para>the length of the string in 2-byte code units and excluding the null terminator is returned.</para>
        /// </param>
        /// <param name="bufsize">
        /// <para>Size of the destination buffer. When this value is insufficient,</para>
        /// <para>the returned string is truncated and null-terminated.</para>
        /// </param>
        /// <param name="result">Number of 2-byte code units copied into the buffer, excluding the null terminator.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueStringUtf16(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, char* buf, ulong bufsize, ref ulong result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (ulong* __result4 = &result)
            {
                var __arg4 = __result4;
                var ___ret = __Internal.OH_JSVM_GetValueStringUtf16(__arg0, __arg1, buf, bufsize, __arg4);
                return ___ret;
            }
        }

        /// <summary>This API returns the C primitive equivalent of the given JSVM_Value as a uint32_t.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">JSVM_Value representing JavaScript number.</param>
        /// <param name="result">C primitive equivalent of the given JSVM_Value as a uint32_t.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetValueUint32(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref uint result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (uint* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_GetValueUint32(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>This API is used to return the JavaScript singleton object that is used to represent the given boolean value.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The value of the boolean to retrieve.</param>
        /// <param name="result">JSVM_Value representing JavaScript Boolean singleton to retrieve.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetBoolean(global::OpenHarmony.NDK.Bindings.JSVM_Env env, bool value, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_GetBoolean(__arg0, value, __arg2);
            return ___ret;
        }

        /// <summary>This API returns the global object.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">JSVM_Value representing JavaScript global object.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetGlobal(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_GetGlobal(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This API returns the null object.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">JSVM_Value representing JavaScript null object.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetNull(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_GetNull(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This API returns the Undefined object.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">JSVM_Value representing JavaScript Undefined value.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetUndefined(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_GetUndefined(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This API implements the abstract operation ToBoolean()</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value to coerce.</param>
        /// <param name="result">JSVM_Value representing the coerced JavaScript Boolean.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CoerceToBool(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_CoerceToBool(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>
        /// <para>This API implements the abstract operation ToNumber() as defined. This</para>
        /// <para>function potentially runs JS code if the passed-in value is an object.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value to coerce.</param>
        /// <param name="result">JSVM_Value representing the coerced JavaScript number.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CoerceToNumber(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_CoerceToNumber(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>This API implements the abstract operation ToObject().</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value to coerce.</param>
        /// <param name="result">JSVM_Value representing the coerced JavaScript Object.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CoerceToObject(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_CoerceToObject(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>
        /// <para>This API implements the abstract operation ToString().This</para>
        /// <para>function potentially runs JS code if the passed-in value is an object.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value to coerce.</param>
        /// <param name="result">JSVM_Value representing the coerced JavaScript string.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CoerceToString(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_CoerceToString(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>
        /// <para>This API represents behavior similar to invoking the typeof Operator</para>
        /// <para>on the object as defined. However, there are some differences:It has support</para>
        /// <para>for detecting an External value.It detects null as a separate type, while</para>
        /// <para>ECMAScript typeof would detect object.If value has a type that is invalid,</para>
        /// <para>an error is returned.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value whose type to query.</param>
        /// <param name="result">The type of the JavaScript value.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_Typeof(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref global::OpenHarmony.NDK.Bindings.JSVM_ValueType result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (global::OpenHarmony.NDK.Bindings.JSVM_ValueType* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_Typeof(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>This API represents invoking the instanceof Operator on the object.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The JavaScript value to check.</param>
        /// <param name="constructor">
        /// <para>The JavaScript function object of the constructor function</para>
        /// <para>to check against.</para>
        /// </param>
        /// <param name="result">Boolean that is set to true if object instanceof constructor is true.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_Instanceof(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, global::OpenHarmony.NDK.Bindings.JSVM_Value constructor, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var __arg2 = constructor is null ? __IntPtr.Zero : constructor.__Instance;
            fixed (bool* __result3 = &result)
            {
                var __arg3 = __result3;
                var ___ret = __Internal.OH_JSVM_Instanceof(__arg0, __arg1, __arg2, __arg3);
                return ___ret;
            }
        }

        /// <summary>This API represents invoking the IsArray operation on the object</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="result">Whether the given object is an array.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsArray(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_IsArray(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>This API checks if the Object passed in is an array buffer.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="result">Whether the given object is an ArrayBuffer.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsArraybuffer(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_IsArraybuffer(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>This API checks if the Object passed in is a date.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="isDate">Whether the given JSVM_Value represents a JavaScript Date object.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsDate(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool isDate)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __isDate2 = &isDate)
            {
                var __arg2 = __isDate2;
                var ___ret = __Internal.OH_JSVM_IsDate(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>This API checks if the Object passed in is a typed array.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="result">Whether the given JSVM_Value represents a TypedArray.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsTypedarray(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_IsTypedarray(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>This API checks if the Object passed in is a DataView.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="result">Whether the given JSVM_Value represents a DataView.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsDataview(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_IsDataview(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>This API represents the invocation of the Strict Equality algorithm.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="lhs">The JavaScript value to check.</param>
        /// <param name="rhs">The JavaScript value to check against.</param>
        /// <param name="result">Whether the two JSVM_Value objects are equal.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_StrictEquals(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value lhs, global::OpenHarmony.NDK.Bindings.JSVM_Value rhs, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = lhs is null ? __IntPtr.Zero : lhs.__Instance;
            var __arg2 = rhs is null ? __IntPtr.Zero : rhs.__Instance;
            fixed (bool* __result3 = &result)
            {
                var __arg3 = __result3;
                var ___ret = __Internal.OH_JSVM_StrictEquals(__arg0, __arg1, __arg2, __arg3);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This API represents the invocation of the Relaxed Equality algorithm.</para>
        /// <para>Returns true as long as the values are equal, regardless of type.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="lhs">The JavaScript value to check.</param>
        /// <param name="rhs">The JavaScript value to check against.</param>
        /// <param name="result">Whether the two JSVM_Value objects are relaxed equal.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_Equals(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value lhs, global::OpenHarmony.NDK.Bindings.JSVM_Value rhs, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = lhs is null ? __IntPtr.Zero : lhs.__Instance;
            var __arg2 = rhs is null ? __IntPtr.Zero : rhs.__Instance;
            fixed (bool* __result3 = &result)
            {
                var __arg3 = __result3;
                var ___ret = __Internal.OH_JSVM_Equals(__arg0, __arg1, __arg2, __arg3);
                return ___ret;
            }
        }

        /// <summary>This API represents the invocation of the ArrayBuffer detach operation.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="arraybuffer">The JavaScript ArrayBuffer to be detached.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DetachArraybuffer(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value arraybuffer)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = arraybuffer is null ? __IntPtr.Zero : arraybuffer.__Instance;
            var ___ret = __Internal.OH_JSVM_DetachArraybuffer(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This API represents the invocation of the ArrayBuffer IsDetachedBuffer operation.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript ArrayBuffer to be checked.</param>
        /// <param name="result">Whether the arraybuffer is detached.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsDetachedArraybuffer(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_IsDetachedArraybuffer(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This API returns the names of the enumerable properties of object as an array of</para>
        /// <para>strings. The properties of object whose key is a symbol will not be included.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The object from which to retrieve the properties.</param>
        /// <param name="result">
        /// <para>A JSVM_Value representing an array of JavaScript values that represent</para>
        /// <para>the property names of the object. The API can be used to iterate over result using</para>
        /// <para>OH_JSVM_GetArrayLength and OH_JSVM_GetElement.</para>
        /// </param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetPropertyNames(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_GetPropertyNames(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>
        /// <para>This API returns an array containing the names of the available properties</para>
        /// <para>of this object.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The object from which to retrieve the properties.</param>
        /// <param name="keyMode">Whether to retrieve prototype properties as well.</param>
        /// <param name="keyFilter">Which properties to retrieve (enumerable/readable/writable).</param>
        /// <param name="keyConversion">Whether to convert numbered property keys to strings.</param>
        /// <param name="result">
        /// <para>A JSVM_Value representing an array of JavaScript values</para>
        /// <para>that represent the property names of the object. OH_JSVM_GetArrayLength and</para>
        /// <para>OH_JSVM_GetElement can be used to iterate over result.</para>
        /// </param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetAllPropertyNames(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, global::OpenHarmony.NDK.Bindings.JSVM_KeyCollectionMode keyMode, global::OpenHarmony.NDK.Bindings.JSVM_KeyFilter keyFilter, global::OpenHarmony.NDK.Bindings.JSVM_KeyConversion keyConversion, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var ____arg5 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg5 = new __IntPtr(&____arg5);
            var ___ret = __Internal.OH_JSVM_GetAllPropertyNames(__arg0, __arg1, keyMode, keyFilter, keyConversion, __arg5);
            return ___ret;
        }

        /// <summary>This API set a property on the Object passed in.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The object on which to set the property.</param>
        /// <param name="key">The name of the property to set.</param>
        /// <param name="value">The property value.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_SetProperty(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, global::OpenHarmony.NDK.Bindings.JSVM_Value key, global::OpenHarmony.NDK.Bindings.JSVM_Value value)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var __arg2 = key is null ? __IntPtr.Zero : key.__Instance;
            var __arg3 = value is null ? __IntPtr.Zero : value.__Instance;
            var ___ret = __Internal.OH_JSVM_SetProperty(__arg0, __arg1, __arg2, __arg3);
            return ___ret;
        }

        /// <summary>This API gets the requested property from the Object passed in.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The object from which to retrieve the property.</param>
        /// <param name="key">The name of the property to retrieve.</param>
        /// <param name="result">The value of the property.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetProperty(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, global::OpenHarmony.NDK.Bindings.JSVM_Value key, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var __arg2 = key is null ? __IntPtr.Zero : key.__Instance;
            var ____arg3 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg3 = new __IntPtr(&____arg3);
            var ___ret = __Internal.OH_JSVM_GetProperty(__arg0, __arg1, __arg2, __arg3);
            return ___ret;
        }

        /// <summary>This API checks if the Object passed in has the named property.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The object to query.</param>
        /// <param name="key">The name of the property whose existence to check.</param>
        /// <param name="result">Whether the property exists on the object or not.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_HasProperty(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, global::OpenHarmony.NDK.Bindings.JSVM_Value key, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var __arg2 = key is null ? __IntPtr.Zero : key.__Instance;
            fixed (bool* __result3 = &result)
            {
                var __arg3 = __result3;
                var ___ret = __Internal.OH_JSVM_HasProperty(__arg0, __arg1, __arg2, __arg3);
                return ___ret;
            }
        }

        /// <summary>This API attempts to delete the key own property from object.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The object to query.</param>
        /// <param name="key">The name of the property to delete.</param>
        /// <param name="result">
        /// <para>Whether the property deletion succeeded or not. result</para>
        /// <para>can optionally be ignored by passing NULL.</para>
        /// </param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DeleteProperty(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, global::OpenHarmony.NDK.Bindings.JSVM_Value key, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var __arg2 = key is null ? __IntPtr.Zero : key.__Instance;
            fixed (bool* __result3 = &result)
            {
                var __arg3 = __result3;
                var ___ret = __Internal.OH_JSVM_DeleteProperty(__arg0, __arg1, __arg2, __arg3);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This API checks if the Object passed in has the named own property.</para>
        /// <para>key must be a string or a symbol, or an error will be thrown. JSVM-API will</para>
        /// <para>not perform any conversion between data types.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The object to query.</param>
        /// <param name="key">The name of the own property whose existence to check.</param>
        /// <param name="result">Whether the own property exists on the object or not.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_HasOwnProperty(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, global::OpenHarmony.NDK.Bindings.JSVM_Value key, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var __arg2 = key is null ? __IntPtr.Zero : key.__Instance;
            fixed (bool* __result3 = &result)
            {
                var __arg3 = __result3;
                var ___ret = __Internal.OH_JSVM_HasOwnProperty(__arg0, __arg1, __arg2, __arg3);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This method is equivalent to calling OH_JSVM_SetProperty with</para>
        /// <para>a JSVM_Value created from the string passed in as utf8name.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The object on which to set the property.</param>
        /// <param name="utf8name">The name of the property to set.</param>
        /// <param name="value">The property value.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_SetNamedProperty(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, string utf8name, global::OpenHarmony.NDK.Bindings.JSVM_Value value)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var __arg3 = value is null ? __IntPtr.Zero : value.__Instance;
            var ___ret = __Internal.OH_JSVM_SetNamedProperty(__arg0, __arg1, utf8name, __arg3);
            return ___ret;
        }

        /// <summary>
        /// <para>This method is equivalent to calling OH_JSVM_SetProperty with</para>
        /// <para>a JSVM_Value created from the string passed in as utf8name.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The object from which to retrieve the property.</param>
        /// <param name="utf8name">The name of the property to get.</param>
        /// <param name="result">The value of the property.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetNamedProperty(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, string utf8name, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var ____arg3 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg3 = new __IntPtr(&____arg3);
            var ___ret = __Internal.OH_JSVM_GetNamedProperty(__arg0, __arg1, utf8name, __arg3);
            return ___ret;
        }

        /// <summary>
        /// <para>This method is equivalent to calling OH_JSVM_SetProperty with</para>
        /// <para>a JSVM_Value created from the string passed in as utf8name.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The object to query.</param>
        /// <param name="utf8name">The name of the property whose existence to check.</param>
        /// <param name="result">Whether the property exists on the object or not.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_HasNamedProperty(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, string utf8name, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            fixed (bool* __result3 = &result)
            {
                var __arg3 = __result3;
                var ___ret = __Internal.OH_JSVM_HasNamedProperty(__arg0, __arg1, utf8name, __arg3);
                return ___ret;
            }
        }

        /// <summary>This API sets an element on the Object passed in.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The object from which to set the properties.</param>
        /// <param name="index">The index of the property to set.</param>
        /// <param name="value">The property value.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_SetElement(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, uint index, global::OpenHarmony.NDK.Bindings.JSVM_Value value)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var __arg3 = value is null ? __IntPtr.Zero : value.__Instance;
            var ___ret = __Internal.OH_JSVM_SetElement(__arg0, __arg1, index, __arg3);
            return ___ret;
        }

        /// <summary>This API gets the element at the requested index.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The object from which to retrieve the property.</param>
        /// <param name="index">The index of the property to get.</param>
        /// <param name="result">The value of the property.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetElement(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, uint index, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var ____arg3 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg3 = new __IntPtr(&____arg3);
            var ___ret = __Internal.OH_JSVM_GetElement(__arg0, __arg1, index, __arg3);
            return ___ret;
        }

        /// <summary>
        /// <para>This API returns if the Object passed in has an element</para>
        /// <para>at the requested index.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The object to query.</param>
        /// <param name="index">The index of the property whose existence to check.</param>
        /// <param name="result">Whether the property exists on the object or not.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_HasElement(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, uint index, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            fixed (bool* __result3 = &result)
            {
                var __arg3 = __result3;
                var ___ret = __Internal.OH_JSVM_HasElement(__arg0, __arg1, index, __arg3);
                return ___ret;
            }
        }

        /// <summary>This API attempts to delete the specified index from object.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The object to query.</param>
        /// <param name="index">The index of the property to delete.</param>
        /// <param name="result">
        /// <para>Whether the element deletion succeeded or not. result</para>
        /// <para>can optionally be ignored by passing NULL.</para>
        /// </param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DeleteElement(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, uint index, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            fixed (bool* __result3 = &result)
            {
                var __arg3 = __result3;
                var ___ret = __Internal.OH_JSVM_DeleteElement(__arg0, __arg1, index, __arg3);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This method allows the efficient definition of multiple properties</para>
        /// <para>on a given object.  The properties are defined using property descriptors.</para>
        /// <para>Given an array of such property descriptors, this API will set the properties</para>
        /// <para>on the object one at a time, as defined by DefineOwnProperty().</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The object from which to retrieve the properties.</param>
        /// <param name="propertyCount">The number of elements in the properties array.</param>
        /// <param name="properties">The array of property descriptors.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DefineProperties(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, ulong propertyCount, global::OpenHarmony.NDK.Bindings.JSVM_PropertyDescriptor properties)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var __arg3 = properties is null ? __IntPtr.Zero : properties.__Instance;
            var ___ret = __Internal.OH_JSVM_DefineProperties(__arg0, __arg1, propertyCount, __arg3);
            return ___ret;
        }

        /// <summary>
        /// <para>This method freezes a given object. This prevents new properties</para>
        /// <para>from being added to it, existing properties from being removed, prevents</para>
        /// <para>changing the enumerability, configurability, or writability of existing</para>
        /// <para>properties, and prevents the values of existing properties from being changed.</para>
        /// <para>It also prevents the object's prototype from being changed.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The object to freeze.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ObjectFreeze(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var ___ret = __Internal.OH_JSVM_ObjectFreeze(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>
        /// <para>This method seals a given object. This prevents new properties</para>
        /// <para>from being added to it, as well as marking all existing properties as non-configurable.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The object to seal.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ObjectSeal(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var ___ret = __Internal.OH_JSVM_ObjectSeal(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>
        /// <para>This method allows a JavaScript function object to be called from</para>
        /// <para>a native add-on. This is the primary mechanism of calling back from the</para>
        /// <para>add-on's native code into JavaScript.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="recv">The this value passed to the called function.</param>
        /// <param name="func">JSVM_Value representing the JavaScript function to be invoked.</param>
        /// <param name="argc">The count of elements in the argv array.</param>
        /// <param name="argv">Array of JSVM_values representing JavaScript values passed in as arguments to the function.</param>
        /// <param name="result">JSVM_Value representing the JavaScript object returned.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CallFunction(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value recv, global::OpenHarmony.NDK.Bindings.JSVM_Value func, ulong argc, global::OpenHarmony.NDK.Bindings.JSVM_Value argv, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = recv is null ? __IntPtr.Zero : recv.__Instance;
            var __arg2 = func is null ? __IntPtr.Zero : func.__Instance;
            var ____arg4 = argv is null ? __IntPtr.Zero : argv.__Instance;
            var __arg4 = new __IntPtr(&____arg4);
            var ____arg5 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg5 = new __IntPtr(&____arg5);
            var ___ret = __Internal.OH_JSVM_CallFunction(__arg0, __arg1, __arg2, argc, __arg4, __arg5);
            return ___ret;
        }

        /// <summary>
        /// <para>This API allows an add-on author to create a function object in native</para>
        /// <para>code. This is the primary mechanism to allow calling into the add-on's native</para>
        /// <para>code from JavaScript.The newly created function is not automatically visible</para>
        /// <para>from script after this call. Instead, a property must be explicitly set on any</para>
        /// <para>object that is visible to JavaScript, in order for the function to be accessible</para>
        /// <para>from script.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="utf8name">
        /// <para>Optional name of the function encoded as UTF8. This is visible</para>
        /// <para>within JavaScript as the new function object's name property.</para>
        /// </param>
        /// <param name="length">
        /// <para>The length of the utf8name in bytes, or JSVM_AUTO_LENGTH if it</para>
        /// <para>is null-terminated.</para>
        /// </param>
        /// <param name="cb">
        /// <para>The native function which should be called when this function</para>
        /// <para>object is invoked and data. JSVM_Callback provides more details.</para>
        /// </param>
        /// <param name="result">
        /// <para>JSVM_Value representing the JavaScript function object for the newly</para>
        /// <para>created function.</para>
        /// </param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateFunction(global::OpenHarmony.NDK.Bindings.JSVM_Env env, string utf8name, ulong length, global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct cb, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg3 = cb is null ? __IntPtr.Zero : cb.__Instance;
            var ____arg4 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg4 = new __IntPtr(&____arg4);
            var ___ret = __Internal.OH_JSVM_CreateFunction(__arg0, utf8name, length, __arg3, __arg4);
            return ___ret;
        }

        /// <summary>
        /// <para>This method is used within a callback function to retrieve details about</para>
        /// <para>the call like the arguments and the this pointer from a given callback info.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="cbinfo">The callback info passed into the callback function.</param>
        /// <param name="argc">
        /// <para>Specifies the length of the provided argv array and receives the</para>
        /// <para>actual count of arguments. argc can optionally be ignored by passing NULL.</para>
        /// </param>
        /// <param name="argv">
        /// <para>C array of JSVM_values to which the arguments will be copied. If</para>
        /// <para>there are more arguments than the provided count, only the requested number of</para>
        /// <para>arguments are copied. If there are fewer arguments provided than claimed, the</para>
        /// <para>rest of argv is filled with JSVM_Value values that represent undefined. argv</para>
        /// <para>can optionally be ignored by passing NULL.</para>
        /// </param>
        /// <param name="thisArg">
        /// <para>Receives the JavaScript this argument for the call. thisArg</para>
        /// <para>can optionally be ignored by passing NULL.</para>
        /// </param>
        /// <param name="data">
        /// <para>Receives the data pointer for the callback. data can optionally</para>
        /// <para>be ignored by passing NULL.</para>
        /// </param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetCbInfo(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_CallbackInfo cbinfo, ref ulong argc, global::OpenHarmony.NDK.Bindings.JSVM_Value argv, global::OpenHarmony.NDK.Bindings.JSVM_Value thisArg, __IntPtr* data)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = cbinfo is null ? __IntPtr.Zero : cbinfo.__Instance;
            fixed (ulong* __argc2 = &argc)
            {
                var __arg2 = __argc2;
                var ____arg3 = argv is null ? __IntPtr.Zero : argv.__Instance;
                var __arg3 = new __IntPtr(&____arg3);
                var ____arg4 = thisArg is null ? __IntPtr.Zero : thisArg.__Instance;
                var __arg4 = new __IntPtr(&____arg4);
                var ___ret = __Internal.OH_JSVM_GetCbInfo(__arg0, __arg1, __arg2, __arg3, __arg4, data);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This API returns the new.target of the constructor call. If the</para>
        /// <para>current callback is not a constructor call, the result is NULL.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="cbinfo">The callback info passed into the callback function.</param>
        /// <param name="result">The new.target of the constructor call.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetNewTarget(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_CallbackInfo cbinfo, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = cbinfo is null ? __IntPtr.Zero : cbinfo.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_GetNewTarget(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>
        /// <para>his method is used to instantiate a new JavaScript value using</para>
        /// <para>a given JSVM_Value that represents the constructor for the object.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="constructor">JSVM_Value representing the JavaScript function to be invoked as a constructor.</param>
        /// <param name="argc">The count of elements in the argv array.</param>
        /// <param name="argv">
        /// <para>Array of JavaScript values as JSVM_Value representing the arguments to</para>
        /// <para>the constructor. If argc is zero this parameter may be omitted by passing in NULL.</para>
        /// </param>
        /// <param name="result">
        /// <para>JSVM_Value representing the JavaScript object returned, which</para>
        /// <para>in this case is the constructed object.</para>
        /// </param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_NewInstance(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value constructor, ulong argc, global::OpenHarmony.NDK.Bindings.JSVM_Value argv, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = constructor is null ? __IntPtr.Zero : constructor.__Instance;
            var ____arg3 = argv is null ? __IntPtr.Zero : argv.__Instance;
            var __arg3 = new __IntPtr(&____arg3);
            var ____arg4 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg4 = new __IntPtr(&____arg4);
            var ___ret = __Internal.OH_JSVM_NewInstance(__arg0, __arg1, argc, __arg3, __arg4);
            return ___ret;
        }

        /// <summary>
        /// <para>When wrapping a C++ class, the C++ constructor callback passed via constructor</para>
        /// <para>should be a static method on the class that calls the actual class constructor, then</para>
        /// <para>wraps the new C++ instance in a JavaScript object, and returns the wrapper object.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="utf8name">
        /// <para>Name of the JavaScript constructor function. For clarity, it is</para>
        /// <para>recommended to use the C++ class name when wrapping a C++ class.</para>
        /// </param>
        /// <param name="length">
        /// <para>The length of the utf8name in bytes, or JSVM_AUTO_LENGTH if it</para>
        /// <para>is null-terminated.</para>
        /// </param>
        /// <param name="constructor">
        /// <para>Struct include callback function that handles constructing instances of the class.</para>
        /// <para>When wrapping a C++ class, this method must be a static member with the JSVM_Callback.callback</para>
        /// <para>signature. A C++ class constructor cannot be used.</para>
        /// <para>Include Optional data to be passed to the constructor callback as the data</para>
        /// <para>property of the callback info. JSVM_Callback provides more details.</para>
        /// </param>
        /// <param name="propertyCount">Number of items in the properties array argument.</param>
        /// <param name="properties">
        /// <para>Array of property descriptors describing static and instance data</para>
        /// <para>properties, accessors, and methods on the class See JSVM_PropertyDescriptor.</para>
        /// </param>
        /// <param name="result">A JSVM_Value representing the constructor function for the class.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DefineClass(global::OpenHarmony.NDK.Bindings.JSVM_Env env, string utf8name, ulong length, global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct constructor, ulong propertyCount, global::OpenHarmony.NDK.Bindings.JSVM_PropertyDescriptor properties, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg3 = constructor is null ? __IntPtr.Zero : constructor.__Instance;
            var __arg5 = properties is null ? __IntPtr.Zero : properties.__Instance;
            var ____arg6 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg6 = new __IntPtr(&____arg6);
            var ___ret = __Internal.OH_JSVM_DefineClass(__arg0, utf8name, length, __arg3, propertyCount, __arg5, __arg6);
            return ___ret;
        }

        /// <summary>
        /// <para>Wraps a native instance in a JavaScript object.  The native instance can</para>
        /// <para>be retrieved later using OH_JSVM_Unwrap().</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="jsObject">The JavaScript object that will be the wrapper for the native object.</param>
        /// <param name="nativeObject">The native instance that will be wrapped in the JavaScript object.</param>
        /// <param name="finalizeCb">
        /// <para>Optional native callback that can be used to free the native instance</para>
        /// <para>when the JavaScript object has been garbage-collected.</para>
        /// </param>
        /// <param name="finalizeHint">
        /// <para>Optional contextual hint that is passed to the finalize callback.</para>
        /// <para>properties, accessors, and methods on the class See JSVM_PropertyDescriptor.</para>
        /// </param>
        /// <param name="result">Optional reference to the wrapped object.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_Wrap(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value jsObject, __IntPtr nativeObject, global::OpenHarmony.NDK.Bindings.JSVM_Finalize finalizeCb, __IntPtr finalizeHint, global::OpenHarmony.NDK.Bindings.JSVM_Ref result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = jsObject is null ? __IntPtr.Zero : jsObject.__Instance;
            var __arg3 = finalizeCb == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(finalizeCb);
            var ____arg5 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg5 = new __IntPtr(&____arg5);
            var ___ret = __Internal.OH_JSVM_Wrap(__arg0, __arg1, nativeObject, __arg3, finalizeHint, __arg5);
            return ___ret;
        }

        /// <summary>
        /// <para>When JavaScript code invokes a method or property accessor on the class, the corresponding</para>
        /// <para>JSVM_Callback is invoked. If the callback is for an instance method or accessor, then the this</para>
        /// <para>argument to the callback is the wrapper object; the wrapped C++ instance that is the target of</para>
        /// <para>the call can be obtained then by calling OH_JSVM_Unwrap() on the wrapper object.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="jsObject">The object associated with the native instance.</param>
        /// <param name="result">Pointer to the wrapped native instance.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_Unwrap(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value jsObject, __IntPtr* result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = jsObject is null ? __IntPtr.Zero : jsObject.__Instance;
            var ___ret = __Internal.OH_JSVM_Unwrap(__arg0, __arg1, result);
            return ___ret;
        }

        /// <summary>
        /// <para>Retrieves a native instance that was previously wrapped in the JavaScript object jsObject</para>
        /// <para>using OH_JSVM_Wrap() and removes the wrapping. If a finalize callback was associated with the wrapping,</para>
        /// <para>it will no longer be called when the JavaScript object becomes garbage-collected.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="jsObject">The object associated with the native instance.</param>
        /// <param name="result">Pointer to the wrapped native instance.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_RemoveWrap(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value jsObject, __IntPtr* result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = jsObject is null ? __IntPtr.Zero : jsObject.__Instance;
            var ___ret = __Internal.OH_JSVM_RemoveWrap(__arg0, __arg1, result);
            return ___ret;
        }

        /// <summary>
        /// <para>Associates the value of the typeTag pointer with the JavaScript object or external.</para>
        /// <para>OH_JSVM_CheckObjectTypeTag() can then be used to compare the tag that was attached to the</para>
        /// <para>object with one owned by the addon to ensure that the object has the right type.</para>
        /// <para>If the object already has an associated type tag, this API will return JSVM_INVALID_ARG.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript object or external to be marked.</param>
        /// <param name="typeTag">The tag with which the object is to be marked.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_TypeTagObject(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, global::OpenHarmony.NDK.Bindings.JSVM_TypeTag typeTag)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            var __arg2 = typeTag is null ? __IntPtr.Zero : typeTag.__Instance;
            var ___ret = __Internal.OH_JSVM_TypeTagObject(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>
        /// <para>Compares the pointer given as typeTag with any that can be found on js object.</para>
        /// <para>If no tag is found on js object or, if a tag is found but it does not match typeTag,</para>
        /// <para>then result is set to false. If a tag is found and it matches typeTag, then result is set to true.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript object or external whose type tag to examine.</param>
        /// <param name="typeTag">The tag with which to compare any tag found on the object.</param>
        /// <param name="result">
        /// <para>Whether the type tag given matched the type tag on the object. false is also returned</para>
        /// <para>if no type tag was found on the object.</para>
        /// </param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CheckObjectTypeTag(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, global::OpenHarmony.NDK.Bindings.JSVM_TypeTag typeTag, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            var __arg2 = typeTag is null ? __IntPtr.Zero : typeTag.__Instance;
            fixed (bool* __result3 = &result)
            {
                var __arg3 = __result3;
                var ___ret = __Internal.OH_JSVM_CheckObjectTypeTag(__arg0, __arg1, __arg2, __arg3);
                return ___ret;
            }
        }

        /// <summary>This API can be called multiple times on a single JavaScript object.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="jsObject">The JavaScript object to which the native data will be attached.</param>
        /// <param name="finalizeData">Optional data to be passed to finalizeCb.</param>
        /// <param name="finalizeCb">
        /// <para>Native callback that will be used to free the native data when the</para>
        /// <para>JavaScript object has been garbage-collected. JSVM_Finalize provides more details.</para>
        /// </param>
        /// <param name="finalizeHint">Optional contextual hint that is passed to the finalize callback.</param>
        /// <param name="result">Optional reference to the JavaScript object.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_AddFinalizer(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value jsObject, __IntPtr finalizeData, global::OpenHarmony.NDK.Bindings.JSVM_Finalize finalizeCb, __IntPtr finalizeHint, global::OpenHarmony.NDK.Bindings.JSVM_Ref result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = jsObject is null ? __IntPtr.Zero : jsObject.__Instance;
            var __arg3 = finalizeCb == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(finalizeCb);
            var ____arg5 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg5 = new __IntPtr(&____arg5);
            var ___ret = __Internal.OH_JSVM_AddFinalizer(__arg0, __arg1, finalizeData, __arg3, finalizeHint, __arg5);
            return ___ret;
        }

        /// <summary>This API returns the highest JSVM-API version supported by the JSVM runtime.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">The highest version of JSVM-API supported.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        /// <remarks>
        /// <para>JSVM-API is planned to be additive such that newer releases of JSVM may support additional</para>
        /// <para>API functions. In order to allow an addon to use a newer function when running with versions</para>
        /// <para>of JSVM that support it, while providing fallback behavior when running with JSVM</para>
        /// <para>versions that don't support it.</para>
        /// </remarks>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetVersion(global::OpenHarmony.NDK.Bindings.JSVM_Env env, ref uint result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            fixed (uint* __result1 = &result)
            {
                var __arg1 = __result1;
                var ___ret = __Internal.OH_JSVM_GetVersion(__arg0, __arg1);
                return ___ret;
            }
        }

        /// <summary>Return information of the VM.</summary>
        /// <param name="result">The information of the VM.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetVMInfo(global::OpenHarmony.NDK.Bindings.JSVM_VMInfo result)
        {
            var __arg0 = result is null ? __IntPtr.Zero : result.__Instance;
            var ___ret = __Internal.OH_JSVM_GetVMInfo(__arg0);
            return ___ret;
        }

        /// <summary>
        /// <para>This function gives V8 an indication of the amount of externally</para>
        /// <para>allocated memory that is kept alive by JavaScript objects (i.e. a JavaScript</para>
        /// <para>object that points to its own memory allocated by a native addon). Registering</para>
        /// <para>externally allocated memory will trigger global garbage collections more often</para>
        /// <para>than it would otherwise.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="changeInBytes">
        /// <para>The change in externally allocated memory that is kept</para>
        /// <para>alive by JavaScript objects.</para>
        /// </param>
        /// <param name="result">The adjusted value</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_AdjustExternalMemory(global::OpenHarmony.NDK.Bindings.JSVM_Env env, long changeInBytes, ref long result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            fixed (long* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_AdjustExternalMemory(__arg0, changeInBytes, __arg2);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This function notifies the VM that the system is running low on memory</para>
        /// <para>and optionally triggers a garbage collection.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="level">The memory pressure level set to the current VM.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_MemoryPressureNotification(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_MemoryPressureLevel level)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ___ret = __Internal.OH_JSVM_MemoryPressureNotification(__arg0, level);
            return ___ret;
        }

        /// <summary>This API creates a deferred object and a JavaScript promise.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="deferred">
        /// <para>A newly created deferred object which can later be</para>
        /// <para>passed to OH_JSVM_ResolveDeferred() or OH_JSVM_RejectDeferred() to resolve</para>
        /// <para>resp. reject the associated promise.</para>
        /// </param>
        /// <param name="promise">The JavaScript promise associated with the deferred object.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreatePromise(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Deferred deferred, global::OpenHarmony.NDK.Bindings.JSVM_Value promise)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = deferred is null ? __IntPtr.Zero : deferred.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ____arg2 = promise is null ? __IntPtr.Zero : promise.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_CreatePromise(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>
        /// <para>This API resolves a JavaScript promise by way of the deferred object with</para>
        /// <para>which it is associated. Thus, it can only be used to resolve JavaScript promises</para>
        /// <para>for which the corresponding deferred object is available. This effectively means</para>
        /// <para>that the promise must have been created using OH_JSVM_CreatePromise() and the deferred</para>
        /// <para>object returned from that call must have been retained in order to be passed to this API.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="deferred">The deferred object whose associated promise to resolve.</param>
        /// <param name="resolution">The value with which to resolve the promise.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ResolveDeferred(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Deferred deferred, global::OpenHarmony.NDK.Bindings.JSVM_Value resolution)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = deferred is null ? __IntPtr.Zero : deferred.__Instance;
            var __arg2 = resolution is null ? __IntPtr.Zero : resolution.__Instance;
            var ___ret = __Internal.OH_JSVM_ResolveDeferred(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>
        /// <para>This API rejects a JavaScript promise by way of the deferred object with</para>
        /// <para>which it is associated. Thus, it can only be used to reject JavaScript promises</para>
        /// <para>for which the corresponding deferred object is available. This effectively means</para>
        /// <para>that the promise must have been created using OH_JSVM_CreatePromise() and the deferred</para>
        /// <para>object returned from that call must have been retained in order to be passed to this API.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="deferred">The deferred object whose associated promise to resolve.</param>
        /// <param name="rejection">The value with which to reject the promise.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_RejectDeferred(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Deferred deferred, global::OpenHarmony.NDK.Bindings.JSVM_Value rejection)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = deferred is null ? __IntPtr.Zero : deferred.__Instance;
            var __arg2 = rejection is null ? __IntPtr.Zero : rejection.__Instance;
            var ___ret = __Internal.OH_JSVM_RejectDeferred(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>This API return indicating whether promise is a native promise object.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The value to examine</param>
        /// <param name="isPromise">Flag indicating whether promise is a native promise object</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsPromise(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool isPromise)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __isPromise2 = &isPromise)
            {
                var __arg2 = __isPromise2;
                var ___ret = __Internal.OH_JSVM_IsPromise(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>This API register a resolution/rejection handler with a promise.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="promise">The promise to be handled.</param>
        /// <param name="onFulfilled">The function to be invoked if promise is resolved.</param>
        /// <param name="onRejected">The function to be invoked if promise is rejected.</param>
        /// <param name="result">Another promise returned from promise then/catch method.</param>
        /// <returns>
        /// <para>Returns JSVM functions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_PromiseRegisterHandler(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value promise, global::OpenHarmony.NDK.Bindings.JSVM_Value onFulfilled, global::OpenHarmony.NDK.Bindings.JSVM_Value onRejected, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = promise is null ? __IntPtr.Zero : promise.__Instance;
            var __arg2 = onFulfilled is null ? __IntPtr.Zero : onFulfilled.__Instance;
            var __arg3 = onRejected is null ? __IntPtr.Zero : onRejected.__Instance;
            var ____arg4 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg4 = new __IntPtr(&____arg4);
            var ___ret = __Internal.OH_JSVM_PromiseRegisterHandler(__arg0, __arg1, __arg2, __arg3, __arg4);
            return ___ret;
        }

        /// <summary>This API parses a JSON string and returns it as value if successful.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="jsonString">The string to parse.</param>
        /// <param name="result">The parse value if successful.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_JsonParse(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value jsonString, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = jsonString is null ? __IntPtr.Zero : jsonString.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_JsonParse(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>This API stringifies the object and returns it as string if successful.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="jsonObject">The object to stringify.</param>
        /// <param name="result">The string if successfully stringified.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_JsonStringify(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value jsonObject, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = jsonObject is null ? __IntPtr.Zero : jsonObject.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_JsonStringify(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>This API create the startup snapshot of the VM.</summary>
        /// <param name="vm">The environment that the API is invoked under.</param>
        /// <param name="contextCount">The object to stringify.</param>
        /// <param name="contexts">The array of contexts to add to the snapshot.</param>
        /// <param name="blobData">The snapshot data.</param>
        /// <param name="blobSize">The size of snapshot data.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateSnapshot(global::OpenHarmony.NDK.Bindings.JSVM_VM_ vm, ulong contextCount, global::OpenHarmony.NDK.Bindings.JSVM_Env contexts, sbyte** blobData, ref ulong blobSize)
        {
            var __arg0 = vm is null ? __IntPtr.Zero : vm.__Instance;
            var ____arg2 = contexts is null ? __IntPtr.Zero : contexts.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            fixed (ulong* __blobSize4 = &blobSize)
            {
                var __arg4 = __blobSize4;
                var ___ret = __Internal.OH_JSVM_CreateSnapshot(__arg0, contextCount, __arg2, blobData, __arg4);
                return ___ret;
            }
        }

        /// <summary>This function returns a set of statistics data of the heap of the VM.</summary>
        /// <param name="vm">The VM whose heap statistics are returned.</param>
        /// <param name="result">The heap statistics data.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>Returns {</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetHeapStatistics(global::OpenHarmony.NDK.Bindings.JSVM_VM_ vm, global::OpenHarmony.NDK.Bindings.JSVM_HeapStatistics result)
        {
            var __arg0 = vm is null ? __IntPtr.Zero : vm.__Instance;
            var __arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var ___ret = __Internal.OH_JSVM_GetHeapStatistics(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This function creates and starts a CPU profiler.</summary>
        /// <param name="vm">The VM to start CPU profiler for.</param>
        /// <param name="result">The pointer to the CPU profiler.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>Returns {</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_StartCpuProfiler(global::OpenHarmony.NDK.Bindings.JSVM_VM_ vm, global::OpenHarmony.NDK.Bindings.JSVM_CpuProfiler result)
        {
            var __arg0 = vm is null ? __IntPtr.Zero : vm.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_StartCpuProfiler(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This function stops the CPU profiler and output to the stream.</summary>
        /// <param name="vm">THe VM to start CPU profiler for.</param>
        /// <param name="profiler">The CPU profiler to stop.</param>
        /// <param name="stream">The output stream callback for receiving the data.</param>
        /// <param name="streamData">Optional data to be passed to the stream callback.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>Returns {</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_StopCpuProfiler(global::OpenHarmony.NDK.Bindings.JSVM_VM_ vm, global::OpenHarmony.NDK.Bindings.JSVM_CpuProfiler profiler, global::OpenHarmony.NDK.Bindings.JSVM_OutputStream stream, __IntPtr streamData)
        {
            var __arg0 = vm is null ? __IntPtr.Zero : vm.__Instance;
            var __arg1 = profiler is null ? __IntPtr.Zero : profiler.__Instance;
            var __arg2 = stream == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(stream);
            var ___ret = __Internal.OH_JSVM_StopCpuProfiler(__arg0, __arg1, __arg2, streamData);
            return ___ret;
        }

        /// <summary>This funciton takes the current heap snapshot and output to the stream.</summary>
        /// <param name="vm">The VM whose heap snapshot is taken.</param>
        /// <param name="stream">The output stream callback for receiving the data.</param>
        /// <param name="streamData">Optional data to be passed to the stream callback.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>Returns {</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_TakeHeapSnapshot(global::OpenHarmony.NDK.Bindings.JSVM_VM_ vm, global::OpenHarmony.NDK.Bindings.JSVM_OutputStream stream, __IntPtr streamData)
        {
            var __arg0 = vm is null ? __IntPtr.Zero : vm.__Instance;
            var __arg1 = stream == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(stream);
            var ___ret = __Internal.OH_JSVM_TakeHeapSnapshot(__arg0, __arg1, streamData);
            return ___ret;
        }

        /// <summary>This functiong activates insepctor on host and port.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="host">The host to listen to for inspector connections.</param>
        /// <param name="port">The port to listen to for inspector connections.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>Returns {</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_OpenInspector(global::OpenHarmony.NDK.Bindings.JSVM_Env env, string host, ushort port)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ___ret = __Internal.OH_JSVM_OpenInspector(__arg0, host, port);
            return ___ret;
        }

        /// <summary>This function attempts to close all remaining inspector connections.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>Returns {</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CloseInspector(global::OpenHarmony.NDK.Bindings.JSVM_Env env)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ___ret = __Internal.OH_JSVM_CloseInspector(__arg0);
            return ___ret;
        }

        /// <summary>
        /// <para>This function will block until a client (existing or connected later)</para>
        /// <para>has sent Runtime.runIfWaitingForDebugger command.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="breakNextLine">Whether break on the next line of JavaScript code.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>Returns {</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_WaitForDebugger(global::OpenHarmony.NDK.Bindings.JSVM_Env env, bool breakNextLine)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ___ret = __Internal.OH_JSVM_WaitForDebugger(__arg0, breakNextLine);
            return ___ret;
        }

        /// <summary>
        /// <para>Define a JavaScript class with given class name, constructor, properties, callback handlers for</para>
        /// <para>property operations including get, set, delete, enum etc., and call as function callback.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="utf8name">
        /// <para>Name of the JavaScript constructor function. For clarity, it is</para>
        /// <para>recommended to use the C++ class name when wrapping a C++ class.</para>
        /// </param>
        /// <param name="length">
        /// <para>The length of the utf8name in bytes, or JSVM_AUTO_LENGTH if it</para>
        /// <para>is null-terminated.</para>
        /// </param>
        /// <param name="constructor">
        /// <para>Struct include callback function that handles constructing instances of the class.</para>
        /// <para>When wrapping a C++ class, this method must be a static member with the JSVM_Callback.callback</para>
        /// <para>signature. A C++ class constructor cannot be used.</para>
        /// <para>Include Optional data to be passed to the constructor callback as the data</para>
        /// <para>property of the callback info. JSVM_Callback provides more details.</para>
        /// </param>
        /// <param name="propertyCount">Number of items in the properties array argument.</param>
        /// <param name="properties">
        /// <para>Array of property descriptors describing static and instance data</para>
        /// <para>properties, accessors, and methods on the class See JSVM_PropertyDescriptor.</para>
        /// </param>
        /// <param name="propertyHandlerCfg">The instance object triggers the corresponding callback function.</param>
        /// <param name="callAsFunctionCallback">Calling an instance object as a function will trigger this callback.</param>
        /// <param name="result">A JSVM_Value representing the constructor function for the class.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DefineClassWithPropertyHandler(global::OpenHarmony.NDK.Bindings.JSVM_Env env, string utf8name, ulong length, global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct constructor, ulong propertyCount, global::OpenHarmony.NDK.Bindings.JSVM_PropertyDescriptor properties, global::OpenHarmony.NDK.Bindings.JSVM_PropertyHandlerConfigurationStruct propertyHandlerCfg, global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct callAsFunctionCallback, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg3 = constructor is null ? __IntPtr.Zero : constructor.__Instance;
            var __arg5 = properties is null ? __IntPtr.Zero : properties.__Instance;
            var __arg6 = propertyHandlerCfg is null ? __IntPtr.Zero : propertyHandlerCfg.__Instance;
            var __arg7 = callAsFunctionCallback is null ? __IntPtr.Zero : callAsFunctionCallback.__Instance;
            var ____arg8 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg8 = new __IntPtr(&____arg8);
            var ___ret = __Internal.OH_JSVM_DefineClassWithPropertyHandler(__arg0, utf8name, length, __arg3, propertyCount, __arg5, __arg6, __arg7, __arg8);
            return ___ret;
        }

        /// <summary>
        /// <para>Determines whether the current thread holds the lock for the specified environment.</para>
        /// <para>Only threads that hold locks can use the environment.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="isLocked">Flag indicating whether the current thread holds the lock for the specified environment.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsLocked(global::OpenHarmony.NDK.Bindings.JSVM_Env env, ref bool isLocked)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            fixed (bool* __isLocked1 = &isLocked)
            {
                var __arg1 = __isLocked1;
                var ___ret = __Internal.OH_JSVM_IsLocked(__arg0, __arg1);
                return ___ret;
            }
        }

        /// <summary>Acquire the lock for the specified environment. Only threads that hold locks can use the environment.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_AcquireLock(global::OpenHarmony.NDK.Bindings.JSVM_Env env)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ___ret = __Internal.OH_JSVM_AcquireLock(__arg0);
            return ___ret;
        }

        /// <summary>Release the lock for the specified environment. Only threads that hold locks can use the environment.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ReleaseLock(global::OpenHarmony.NDK.Bindings.JSVM_Env env)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ___ret = __Internal.OH_JSVM_ReleaseLock(__arg0);
            return ___ret;
        }

        /// <summary>
        /// <para>Starts the running of the task queue inside the VM.</para>
        /// <para>This task queue can be executed by an external event loop.</para>
        /// </summary>
        /// <param name="vm">The VM instance on which to start the task queue.</param>
        /// <param name="result">Whether the task queue was successfully started.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_PumpMessageLoop(global::OpenHarmony.NDK.Bindings.JSVM_VM_ vm, ref bool result)
        {
            var __arg0 = vm is null ? __IntPtr.Zero : vm.__Instance;
            fixed (bool* __result1 = &result)
            {
                var __arg1 = __result1;
                var ___ret = __Internal.OH_JSVM_PumpMessageLoop(__arg0, __arg1);
                return ___ret;
            }
        }

        /// <summary>Check to see if there are any microtasks waiting in the queue, and if there are, execute them.</summary>
        /// <param name="vm">The VM instance on which to check microtasks.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_PerformMicrotaskCheckpoint(global::OpenHarmony.NDK.Bindings.JSVM_VM_ vm)
        {
            var __arg0 = vm is null ? __IntPtr.Zero : vm.__Instance;
            var ___ret = __Internal.OH_JSVM_PerformMicrotaskCheckpoint(__arg0);
            return ___ret;
        }

        /// <summary>This API checks if the value passed in is callable.</summary>
        /// <param name="env">The VM instance on which to check microtasks.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="isCallable">Whether the given value is callable.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsCallable(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool isCallable)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __isCallable2 = &isCallable)
            {
                var __arg2 = __isCallable2;
                var ___ret = __Internal.OH_JSVM_IsCallable(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This API checks if the value passed in is undefined.</para>
        /// <para>This equals to `value === undefined` in JS.</para>
        /// </summary>
        /// <param name="env">The VM instance on which to check microtasks.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="isUndefined">Whether the given value is Undefined.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsUndefined(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool isUndefined)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __isUndefined2 = &isUndefined)
            {
                var __arg2 = __isUndefined2;
                var ___ret = __Internal.OH_JSVM_IsUndefined(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This API checks if the value passed in is a null object.</para>
        /// <para>This equals to `value === null` in JS.</para>
        /// </summary>
        /// <param name="env">The VM instance on which to check microtasks.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="isNull">Whether the given value is Null.</param>
        /// <returns>
        /// <para>Only returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsNull(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool isNull)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __isNull2 = &isNull)
            {
                var __arg2 = __isNull2;
                var ___ret = __Internal.OH_JSVM_IsNull(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This API checks if the value passed in is either a null or an undefined object.</para>
        /// <para>This is equivalent to `value == null` in JS.</para>
        /// </summary>
        /// <param name="env">The VM instance on which to check microtasks.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="isNullOrUndefined">Whether the given value is Null or Undefined.</param>
        /// <returns>
        /// <para>Only returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsNullOrUndefined(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool isNullOrUndefined)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __isNullOrUndefined2 = &isNullOrUndefined)
            {
                var __arg2 = __isNullOrUndefined2;
                var ___ret = __Internal.OH_JSVM_IsNullOrUndefined(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This API checks if the value passed in is a boolean.</para>
        /// <para>This equals to `typeof value === 'boolean'` in JS.</para>
        /// </summary>
        /// <param name="env">The VM instance on which to check microtasks.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="isBoolean">Whether the given value is Boolean.</param>
        /// <returns>
        /// <para>Only returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsBoolean(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool isBoolean)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __isBoolean2 = &isBoolean)
            {
                var __arg2 = __isBoolean2;
                var ___ret = __Internal.OH_JSVM_IsBoolean(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This API checks if the value passed in is a number.</para>
        /// <para>This equals to `typeof value === 'number'` in JS.</para>
        /// </summary>
        /// <param name="env">The VM instance on which to check microtasks.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="isNumber">Whether the given value is Number.</param>
        /// <returns>
        /// <para>Only returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsNumber(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool isNumber)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __isNumber2 = &isNumber)
            {
                var __arg2 = __isNumber2;
                var ___ret = __Internal.OH_JSVM_IsNumber(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This API checks if the value passed in is a string.</para>
        /// <para>This equals to `typeof value === 'string'` in JS.</para>
        /// </summary>
        /// <param name="env">The VM instance on which to check microtasks.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="isString">Whether the given value is String.</param>
        /// <returns>
        /// <para>Only returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsString(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool isString)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __isString2 = &isString)
            {
                var __arg2 = __isString2;
                var ___ret = __Internal.OH_JSVM_IsString(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This API checks if the value passed in is a symbol.</para>
        /// <para>This equals to `typeof value === 'symbol'` in JS.</para>
        /// </summary>
        /// <param name="env">The VM instance on which to check microtasks.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="isSymbol">Whether the given value is Symbol.</param>
        /// <returns>
        /// <para>Only returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsSymbol(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool isSymbol)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __isSymbol2 = &isSymbol)
            {
                var __arg2 = __isSymbol2;
                var ___ret = __Internal.OH_JSVM_IsSymbol(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This API checks if the value passed in is a function.</para>
        /// <para>This equals to `typeof value === 'function'` in JS.</para>
        /// </summary>
        /// <param name="env">The VM instance on which to check microtasks.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="isFunction">Whether the given value is Function.</param>
        /// <returns>
        /// <para>Only returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsFunction(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool isFunction)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __isFunction2 = &isFunction)
            {
                var __arg2 = __isFunction2;
                var ___ret = __Internal.OH_JSVM_IsFunction(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>This API checks if the value passed in is an object.</summary>
        /// <param name="env">The VM instance on which to check microtasks.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="isObject">Whether the given value is Object.</param>
        /// <returns>
        /// <para>Only returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsObject(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool isObject)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __isObject2 = &isObject)
            {
                var __arg2 = __isObject2;
                var ___ret = __Internal.OH_JSVM_IsObject(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This API checks if the value passed in is a bigInt.</para>
        /// <para>This equals to `typeof value === 'bigint'` in JS.</para>
        /// </summary>
        /// <param name="env">The VM instance on which to check microtasks.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="isBigInt">Whether the given value is BigInt.</param>
        /// <returns>
        /// <para>Only returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsBigInt(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool isBigInt)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __isBigInt2 = &isBigInt)
            {
                var __arg2 = __isBigInt2;
                var ___ret = __Internal.OH_JSVM_IsBigInt(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>This API returns a JSVM-API value corresponding to a JavaScript Map type.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript Map.</param>
        /// <returns>
        /// <para>Only returns JSVM function's result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateMap(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_CreateMap(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This API checks if the value passed in is a Map.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="isMap">Whether the given value is Map.</param>
        /// <returns>
        /// <para>Only returns JSVM function's result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsMap(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool isMap)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __isMap2 = &isMap)
            {
                var __arg2 = __isMap2;
                var ___ret = __Internal.OH_JSVM_IsMap(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>This API returns a JSVM-API value corresponding to a JavaScript Set type.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript Set.</param>
        /// <returns>
        /// <para>Returns JSVM function's result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateSet(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_CreateSet(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This API checks if the value passed in is a Set.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="isSet">Whether the given value is Set.</param>
        /// <returns>
        /// <para>Returns JSVM function's result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsSet(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool isSet)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __isSet2 = &isSet)
            {
                var __arg2 = __isSet2;
                var ___ret = __Internal.OH_JSVM_IsSet(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This function compiles a string of JavaScript code with the compile options</para>
        /// <para>and returns the compiled script.</para>
        /// </summary>
        /// <param name="env">The environment that the JSVM-API call is invoked under.</param>
        /// <param name="script">A JavaScript string containing the script to be compiled.</param>
        /// <param name="optionCount">length of option array.</param>
        /// <param name="options">Compile options to be passed.</param>
        /// <param name="result">The compiled script.</param>
        /// <returns>
        /// <para>Returns JSVM functions result code</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CompileScriptWithOptions(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value script, ulong optionCount, global::OpenHarmony.NDK.Bindings.JSVM_CompileOptions[] options, global::OpenHarmony.NDK.Bindings.JSVM_Script result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = script is null ? __IntPtr.Zero : script.__Instance;
            global::OpenHarmony.NDK.Bindings.JSVM_CompileOptions.__Internal[] __options;
            if (options == null)
                __options = null;
            else
            {
                __options = new global::OpenHarmony.NDK.Bindings.JSVM_CompileOptions.__Internal[options.Length];
                for (int i = 0; i < __options.Length; i++)
                {
                    var __element = options[i];
                    __options[i] = __element is null ? new global::OpenHarmony.NDK.Bindings.JSVM_CompileOptions.__Internal() : *(global::OpenHarmony.NDK.Bindings.JSVM_CompileOptions.__Internal*) __element.__Instance;
                }
            }
            var __arg3 = __options;
            var ____arg4 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg4 = new __IntPtr(&____arg4);
            var ___ret = __Internal.OH_JSVM_CompileScriptWithOptions(__arg0, __arg1, optionCount, __arg3, __arg4);
            return ___ret;
        }

        /// <summary>This API implements the abstract operation ToBigInt().</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value to coerce.</param>
        /// <param name="result">JSVM_Value representing the coerced JavaScript BigInt.</param>
        /// <returns>
        /// <para>Returns JSVM function's result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CoerceToBigInt(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_CoerceToBigInt(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>
        /// <para>This API checks if the value passed in is a regExp.</para>
        /// <para>This equals to `value instanceof RegExp` in JS.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="result">Whether the given value is RegExp.</param>
        /// <returns>
        /// <para>Returns JSVM function's result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsRegExp(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_IsRegExp(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>This API checks if the value passed in is a constructor.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="isConstructor">Whether the given value is Constructor.</param>
        /// <returns>
        /// <para>Only returns JSVM function's result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsConstructor(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool isConstructor)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __isConstructor2 = &isConstructor)
            {
                var __arg2 = __isConstructor2;
                var ___ret = __Internal.OH_JSVM_IsConstructor(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This API returns the JavaScript value of the regular expression</para>
        /// <para>corresponding to the input.</para>
        /// <para>The interface may throw an exception.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript string to convert to a regular expression.</param>
        /// <param name="flags">Regular expression flag bits.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript RegExp.</param>
        /// <returns>
        /// <para>Only returns JSVM function's result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateRegExp(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, global::OpenHarmony.NDK.Bindings.JSVM_RegExpFlags flags, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            var ____arg3 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg3 = new __IntPtr(&____arg3);
            var ___ret = __Internal.OH_JSVM_CreateRegExp(__arg0, __arg1, flags, __arg3);
            return ___ret;
        }

        /// <summary>This API returns the Object prototype.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">
        /// <para>JSVM_Value representing JavaScript Object whose prototype to return. This returns</para>
        /// <para>the equivalent of Object.getPrototypeOf (which is not the same as the function's prototype property).</para>
        /// </param>
        /// <param name="result">JSVM_Value representing prototype of the given object.</param>
        /// <returns>
        /// <para>Returns JSVM function's result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ObjectGetPrototypeOf(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_ObjectGetPrototypeOf(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>This API set the prototype on the Object passed in.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The object on which to set the prototype.</param>
        /// <param name="prototype">The prototype value.</param>
        /// <returns>
        /// <para>Returns JSVM function's result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ObjectSetPrototypeOf(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, global::OpenHarmony.NDK.Bindings.JSVM_Value prototype)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var __arg2 = prototype is null ? __IntPtr.Zero : prototype.__Instance;
            var ___ret = __Internal.OH_JSVM_ObjectSetPrototypeOf(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>Creates a function with a given script as its body.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="funcName">A string containing the function's name. Pass NULL to create an anonymous function.</param>
        /// <param name="length">
        /// <para>The length of the funcName in bytes, or JSVM_AUTO_LENGTH if it</para>
        /// <para>is null-terminated.</para>
        /// </param>
        /// <param name="argc">The count of elements in the argv array.</param>
        /// <param name="argv">Array of JSVM_Values representing JavaScript strings passed in as arguments to the function.</param>
        /// <param name="script">A JavaScript string containing the script to use as the function's body.</param>
        /// <param name="result">
        /// <para>JSVM_Value representing the JavaScript function object for the newly</para>
        /// <para>created function.</para>
        /// </param>
        /// <returns>
        /// <para>Returns JSVM function's result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateFunctionWithScript(global::OpenHarmony.NDK.Bindings.JSVM_Env env, string funcName, ulong length, ulong argc, global::OpenHarmony.NDK.Bindings.JSVM_Value argv, global::OpenHarmony.NDK.Bindings.JSVM_Value script, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg4 = argv is null ? __IntPtr.Zero : argv.__Instance;
            var __arg4 = new __IntPtr(&____arg4);
            var __arg5 = script is null ? __IntPtr.Zero : script.__Instance;
            var ____arg6 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg6 = new __IntPtr(&____arg6);
            var ___ret = __Internal.OH_JSVM_CreateFunctionWithScript(__arg0, funcName, length, argc, __arg4, __arg5, __arg6);
            return ___ret;
        }

        /// <summary>
        /// <para>This function keep persistently save a JSVM_Script and extend its lifecycle</para>
        /// <para>beyond the current scope.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="script">A JavaScript string containing the script to be retained.</param>
        /// <returns>
        /// <para>Returns JSVM functions result code</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_RetainScript(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Script script)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = script is null ? __IntPtr.Zero : script.__Instance;
            var ___ret = __Internal.OH_JSVM_RetainScript(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This function release the script retained by OH_JSVM_RetainScript</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="script">A JavaScript string containing the script to be retained.</param>
        /// <returns>
        /// <para>Returns JSVM functions result code</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ReleaseScript(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Script script)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = script is null ? __IntPtr.Zero : script.__Instance;
            var ___ret = __Internal.OH_JSVM_ReleaseScript(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This function activates insepctor with pid and alias it.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="pid">A process id to identify the inspector connection.</param>
        /// <param name="name">
        /// <para>An alias for the inspector that under a specific pid.</para>
        /// <para>default name is jsvm if a nullptr is passed in.</para>
        /// </param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>Returns {</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_OpenInspectorWithName(global::OpenHarmony.NDK.Bindings.JSVM_Env env, int pid, string name)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ___ret = __Internal.OH_JSVM_OpenInspectorWithName(__arg0, pid, name);
            return ___ret;
        }

        /// <summary>
        /// <para>Compile WebAssembly bytecode into a WebAssembly module.</para>
        /// <para>If WebAssembly cache provided, deserialization will be performed.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="wasmBytecode">WebAssembly bytecode.</param>
        /// <param name="wasmBytecodeLength">WebAssembly bytecode length in byte.</param>
        /// <param name="cacheData">Optional WebAssembly cache.</param>
        /// <param name="cacheDataLength">Optional WebAssembly cache length in byte.</param>
        /// <param name="cacheRejected">Output parameter representing whether the provided cacheData is rejected.</param>
        /// <param name="wasmModule">Output parameter representing compiled WebAssembly module.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>Returns {</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CompileWasmModule(global::OpenHarmony.NDK.Bindings.JSVM_Env env, byte* wasmBytecode, ulong wasmBytecodeLength, byte* cacheData, ulong cacheDataLength, ref bool cacheRejected, global::OpenHarmony.NDK.Bindings.JSVM_Value wasmModule)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            fixed (bool* __cacheRejected5 = &cacheRejected)
            {
                var __arg5 = __cacheRejected5;
                var ____arg6 = wasmModule is null ? __IntPtr.Zero : wasmModule.__Instance;
                var __arg6 = new __IntPtr(&____arg6);
                var ___ret = __Internal.OH_JSVM_CompileWasmModule(__arg0, wasmBytecode, wasmBytecodeLength, cacheData, cacheDataLength, __arg5, __arg6);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>Compile the function with the specified index in the WebAssembly module</para>
        /// <para>into the specified optimization level.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="wasmModule">The WebAssembly module to which the function to compiled belongs.</param>
        /// <param name="functionIndex">The index of the function to be compiled, should never be out of range.</param>
        /// <param name="optLevel">Optimization level the function will be compiled with.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>Returns {</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CompileWasmFunction(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value wasmModule, uint functionIndex, global::OpenHarmony.NDK.Bindings.JSVM_WasmOptLevel optLevel)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = wasmModule is null ? __IntPtr.Zero : wasmModule.__Instance;
            var ___ret = __Internal.OH_JSVM_CompileWasmFunction(__arg0, __arg1, functionIndex, optLevel);
            return ___ret;
        }

        /// <summary>Check whether the given JSVM_Value is a WebAssembly module.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="result">Whether the given value is a WebAssembly module.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>Returns {</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsWasmModuleObject(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_IsWasmModuleObject(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>Create cache for compiled WebAssembly module.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="wasmModule">The compiled WebAssembly module.</param>
        /// <param name="data">Output parameter representing generated WebAssembly module cache.</param>
        /// <param name="length">Output parameter representing byte length of generated WebAssembly module cache.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>Returns {</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateWasmCache(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value wasmModule, byte** data, ref ulong length)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = wasmModule is null ? __IntPtr.Zero : wasmModule.__Instance;
            fixed (ulong* __length3 = &length)
            {
                var __arg3 = __length3;
                var ___ret = __Internal.OH_JSVM_CreateWasmCache(__arg0, __arg1, data, __arg3);
                return ___ret;
            }
        }

        /// <summary>Release cache data with specified cache type.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="cacheData">The cache data to be released, double free is undefined behaviors.</param>
        /// <param name="cacheType">The type of cache data.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>Returns {</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_ReleaseCache(global::OpenHarmony.NDK.Bindings.JSVM_Env env, byte* cacheData, global::OpenHarmony.NDK.Bindings.JSVM_CacheType cacheType)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ___ret = __Internal.OH_JSVM_ReleaseCache(__arg0, cacheData, cacheType);
            return ___ret;
        }

        /// <summary>
        /// <para>This API creates an external JavaScript string value from an ISO-8859-1-encoded C</para>
        /// <para>string. The native string is copied when failed to create external string.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="str">Character buffer representing an ISO-8859-1-encoded string.</param>
        /// <param name="length">The length of the string in bytes, or JSVM_AUTO_LENGTH if it is null-terminated.</param>
        /// <param name="finalizeCallback">
        /// <para>Optional callback to call when the external value is being collected.</para>
        /// <para>JSVM_Finalize provides more details.</para>
        /// </param>
        /// <param name="finalizeHint">Optional hint to pass to the finalize callback during collection.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript external string.</param>
        /// <param name="copied">
        /// <para>flag indicate whether the external string is successfully created,</para>
        /// <para>true for faild to create external ones and fall back to non-external strings, false for success.</para>
        /// </param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateExternalStringLatin1(global::OpenHarmony.NDK.Bindings.JSVM_Env env, sbyte* str, ulong length, global::OpenHarmony.NDK.Bindings.JSVM_Finalize finalizeCallback, __IntPtr finalizeHint, global::OpenHarmony.NDK.Bindings.JSVM_Value result, ref bool copied)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg3 = finalizeCallback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(finalizeCallback);
            var ____arg5 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg5 = new __IntPtr(&____arg5);
            fixed (bool* __copied6 = &copied)
            {
                var __arg6 = __copied6;
                var ___ret = __Internal.OH_JSVM_CreateExternalStringLatin1(__arg0, str, length, __arg3, finalizeHint, __arg5, __arg6);
                return ___ret;
            }
        }

        /// <summary>
        /// <para>This API creates an external JavaScript string value from an UTF16-LE-encoded C</para>
        /// <para>string. The native string is copied when failed to create external string.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="str">Character buffer representing an UTF16-LE-encoded string.</param>
        /// <param name="length">The length of the string in bytes, or JSVM_AUTO_LENGTH if it is null-terminated.</param>
        /// <param name="finalizeCallback">
        /// <para>Optional callback to call when the external value is being collected.</para>
        /// <para>JSVM_Finalize provides more details.</para>
        /// </param>
        /// <param name="finalizeHint">Optional hint to pass to the finalize callback during collection.</param>
        /// <param name="result">A JSVM_Value representing a JavaScript external string.</param>
        /// <param name="copied">
        /// <para>flag indicate whether the external string is successfully created,</para>
        /// <para>true for faild to create external ones and fall back to non-external strings, false for success.</para>
        /// </param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateExternalStringUtf16(global::OpenHarmony.NDK.Bindings.JSVM_Env env, char* str, ulong length, global::OpenHarmony.NDK.Bindings.JSVM_Finalize finalizeCallback, __IntPtr finalizeHint, global::OpenHarmony.NDK.Bindings.JSVM_Value result, ref bool copied)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg3 = finalizeCallback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(finalizeCallback);
            var ____arg5 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg5 = new __IntPtr(&____arg5);
            fixed (bool* __copied6 = &copied)
            {
                var __arg6 = __copied6;
                var ___ret = __Internal.OH_JSVM_CreateExternalStringUtf16(__arg0, str, length, __arg3, finalizeHint, __arg5, __arg6);
                return ___ret;
            }
        }

        /// <summary>This API creates a JavaScript private key.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="description">
        /// <para>Optional JSVM_Value which refers to a JavaScript string to be set as the description</para>
        /// <para>for the private key.</para>
        /// </param>
        /// <param name="result">A JSVM_Data representing a JavaScript private key.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreatePrivate(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value description, global::OpenHarmony.NDK.Bindings.JSVM_Data result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = description is null ? __IntPtr.Zero : description.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_CreatePrivate(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>This API set a private property on the Object passed in.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The object on which to set the private property.</param>
        /// <param name="key">The private key of the property.</param>
        /// <param name="value">The private property value.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_SetPrivate(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, global::OpenHarmony.NDK.Bindings.JSVM_Data key, global::OpenHarmony.NDK.Bindings.JSVM_Value value)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var __arg2 = key is null ? __IntPtr.Zero : key.__Instance;
            var __arg3 = value is null ? __IntPtr.Zero : value.__Instance;
            var ___ret = __Internal.OH_JSVM_SetPrivate(__arg0, __arg1, __arg2, __arg3);
            return ___ret;
        }

        /// <summary>This API gets the requested private property from the Object passed in.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The object from which to retrieve the private property.</param>
        /// <param name="key">The private key of the property.</param>
        /// <param name="result">The value of the private property.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetPrivate(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, global::OpenHarmony.NDK.Bindings.JSVM_Data key, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var __arg2 = key is null ? __IntPtr.Zero : key.__Instance;
            var ____arg3 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg3 = new __IntPtr(&____arg3);
            var ___ret = __Internal.OH_JSVM_GetPrivate(__arg0, __arg1, __arg2, __arg3);
            return ___ret;
        }

        /// <summary>This API attempts to delete the property of the private key from object.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="object">The object to query.</param>
        /// <param name="key">The private key of the property to delete.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DeletePrivate(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value @object, global::OpenHarmony.NDK.Bindings.JSVM_Data key)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var __arg2 = key is null ? __IntPtr.Zero : key.__Instance;
            var ___ret = __Internal.OH_JSVM_DeletePrivate(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>This API creates a new reference with the specified reference count to the data passed in.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="data">The JSVM_Data for which a reference is being created.</param>
        /// <param name="initialRefcount">Initial reference count for the new reference.</param>
        /// <param name="result">JSVM_Ref pointing to the new reference.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_CreateDataReference(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Data data, uint initialRefcount, global::OpenHarmony.NDK.Bindings.JSVM_Ref result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = data is null ? __IntPtr.Zero : data.__Instance;
            var ____arg3 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg3 = new __IntPtr(&____arg3);
            var ___ret = __Internal.OH_JSVM_CreateDataReference(__arg0, __arg1, initialRefcount, __arg3);
            return ___ret;
        }

        /// <summary>
        /// <para>If still valid, this API returns the JSVM_Data representing the</para>
        /// <para>JavaScript data associated with the JSVM_Ref. Otherwise, result will be NULL.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="ref">The JSVM_Ref for which the corresponding value is being requested.</param>
        /// <param name="result">The JSVM_Data referenced by the JSVM_Ref.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetReferenceData(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Ref @ref, global::OpenHarmony.NDK.Bindings.JSVM_Data result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = @ref is null ? __IntPtr.Zero : @ref.__Instance;
            var ____arg2 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = __Internal.OH_JSVM_GetReferenceData(__arg0, __arg1, __arg2);
            return ___ret;
        }

        /// <summary>Check whether the given JSVM_Value is a BigInt Object.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="result">Whether the given value is a BigInt Object.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsBigIntObject(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_IsBigIntObject(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>Check whether the given JSVM_Value is a Boolean Object.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="result">Whether the given value is a Boolean Object.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsBooleanObject(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_IsBooleanObject(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>Check whether the given JSVM_Value is a String Object.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="result">Whether the given value is a String Object.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsStringObject(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_IsStringObject(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>Check whether the given JSVM_Value is a Number Object.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="result">Whether the given value is a Number Object.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsNumberObject(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_IsNumberObject(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>Check whether the given JSVM_Value is a Symbol Object.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="value">The JavaScript value to check.</param>
        /// <param name="result">Whether the given value is a Symbol Object.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_IsSymbolObject(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value value, ref bool result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg1 = value is null ? __IntPtr.Zero : value.__Instance;
            fixed (bool* __result2 = &result)
            {
                var __arg2 = __result2;
                var ___ret = __Internal.OH_JSVM_IsSymbolObject(__arg0, __arg1, __arg2);
                return ___ret;
            }
        }

        /// <summary>This API returns the Symbol.asyncIterator of Well-Known Symbols.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">The Symbol.asyncIterator of Well-Known Symbols.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolAsyncIterator(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_GetSymbolAsyncIterator(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This API returns the Symbol.hasInstance of Well-Known Symbols.</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">The Symbol.hasInstance of Well-Known Symbols.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolHasInstance(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_GetSymbolHasInstance(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This API returns the Symbol.isConcatSpreadable of Well-Known Symbols</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">The Symbol.isConcatSpreadable of Well-Known Symbols.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolIsConcatSpreadable(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_GetSymbolIsConcatSpreadable(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This API returns the Symbol.match of Well-Known Symbols</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">The Symbol.match of Well-Known Symbols.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolMatch(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_GetSymbolMatch(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This API returns the Symbol.replace of Well-Known Symbols</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">The Symbol.replace of Well-Known Symbols.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolReplace(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_GetSymbolReplace(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This API returns the Symbol.search of Well-Known Symbols</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">The Symbol.search of Well-Known Symbols.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolSearch(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_GetSymbolSearch(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This API returns the Symbol.split of Well-Known Symbols</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">The Symbol.split of Well-Known Symbols.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolSplit(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_GetSymbolSplit(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This API returns the Symbol.toPrimitive of Well-Known Symbols</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">The Symbol.toPrimitive of Well-Known Symbols.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolToPrimitive(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_GetSymbolToPrimitive(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This API returns the Symbol.unscopables of Well-Known Symbols</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">The Symbol.unscopables of Well-Known Symbols.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolUnscopables(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_GetSymbolUnscopables(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This API returns the Symbol.toStringTag of Well-Known Symbols</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">The Symbol.toStringTag of Well-Known Symbols.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolToStringTag(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_GetSymbolToStringTag(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>This API returns the Symbol.iterator of Well-Known Symbols</summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="result">The Symbol.iterator of Well-Known Symbols.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_GetSymbolIterator(global::OpenHarmony.NDK.Bindings.JSVM_Env env, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var ____arg1 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OH_JSVM_GetSymbolIterator(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>Trace start with specified categories for all JSVM VM.(Non-thread-safe)</summary>
        /// <param name="count">The count of trace categories.</param>
        /// <param name="categories">Select internal trace events for tracing by categories.</param>
        /// <param name="tag">User-defined tag of trace data.</param>
        /// <param name="eventsCount">Number of trace events.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_TraceStart(ulong count, ref global::OpenHarmony.NDK.Bindings.JSVM_TraceCategory categories, string tag, ulong eventsCount)
        {
            fixed (global::OpenHarmony.NDK.Bindings.JSVM_TraceCategory* __categories1 = &categories)
            {
                var __arg1 = __categories1;
                var ___ret = __Internal.OH_JSVM_TraceStart(count, __arg1, tag, eventsCount);
                return ___ret;
            }
        }

        /// <summary>Trace stop for specified categories for all JSVM VM.(Non-thread-safe)</summary>
        /// <param name="stream">The output stream callback for receiving the data.</param>
        /// <param name="streamData">Data passed to the stream callback.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_TraceStop(global::OpenHarmony.NDK.Bindings.JSVM_OutputStream stream, __IntPtr streamData)
        {
            var __arg0 = stream == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(stream);
            var ___ret = __Internal.OH_JSVM_TraceStop(__arg0, streamData);
            return ___ret;
        }

        /// <summary>
        /// <para>Set Handler For OOM Error. If this function is invoked repeatedly,</para>
        /// <para>only the last time takes effect. When handler is null, the previous setting is canceled.</para>
        /// </summary>
        /// <param name="vm">The environment that the API is invoked under.</param>
        /// <param name="handler">The handler for OOM Error.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_SetHandlerForOOMError(global::OpenHarmony.NDK.Bindings.JSVM_VM_ vm, global::OpenHarmony.NDK.Bindings.JSVM_HandlerForOOMError handler)
        {
            var __arg0 = vm is null ? __IntPtr.Zero : vm.__Instance;
            var __arg1 = handler == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(handler);
            var ___ret = __Internal.OH_JSVM_SetHandlerForOOMError(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>
        /// <para>Set Handler For Fatal Error. If this function is invoked repeatedly,</para>
        /// <para>only the last time takes effect. When handler is null, the previous setting is canceled.</para>
        /// </summary>
        /// <param name="vm">The environment that the API is invoked under.</param>
        /// <param name="handler">The handler for Fatal Error.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_SetHandlerForFatalError(global::OpenHarmony.NDK.Bindings.JSVM_VM_ vm, global::OpenHarmony.NDK.Bindings.JSVM_HandlerForFatalError handler)
        {
            var __arg0 = vm is null ? __IntPtr.Zero : vm.__Instance;
            var __arg1 = handler == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(handler);
            var ___ret = __Internal.OH_JSVM_SetHandlerForFatalError(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>
        /// <para>Set Handler For Promise Reject. If this function is invoked repeatedly,</para>
        /// <para>only the last time takes effect. When handler is null, the previous setting is canceled.</para>
        /// </summary>
        /// <param name="vm">The environment that the API is invoked under.</param>
        /// <param name="handler">The handler for Promise Reject.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_SetHandlerForPromiseReject(global::OpenHarmony.NDK.Bindings.JSVM_VM_ vm, global::OpenHarmony.NDK.Bindings.JSVM_HandlerForPromiseReject handler)
        {
            var __arg0 = vm is null ? __IntPtr.Zero : vm.__Instance;
            var __arg1 = handler == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(handler);
            var ___ret = __Internal.OH_JSVM_SetHandlerForPromiseReject(__arg0, __arg1);
            return ___ret;
        }

        /// <summary>
        /// <para>When wrapping a C++ class, the C++ constructor callback passed via constructor</para>
        /// <para>should be a static method on the class that calls the actual class constructor, then</para>
        /// <para>wraps the new C++ instance in a JavaScript object according to the different Options</para>
        /// <para>passed in, and returns the wrapper object.</para>
        /// </summary>
        /// <param name="env">The environment that the API is invoked under.</param>
        /// <param name="utf8name">
        /// <para>Name of the JavaScript constructor function. For clarity, it is</para>
        /// <para>recommended to use the C++ class name when wrapping a C++ class.</para>
        /// </param>
        /// <param name="length">
        /// <para>The length of the utf8name in bytes, or JSVM_AUTO_LENGTH if it</para>
        /// <para>is null-terminated.</para>
        /// </param>
        /// <param name="constructor">
        /// <para>Struct include callback function that handles constructing instances of the class.</para>
        /// <para>When wrapping a C++ class, this method must be a static member with the JSVM_Callback.callback</para>
        /// <para>signature. A C++ class constructor cannot be used.</para>
        /// <para>Include Optional data to be passed to the constructor callback as the data</para>
        /// <para>property of the callback info. JSVM_Callback provides more details.</para>
        /// </param>
        /// <param name="propertyCount">Number of items in the properties array argument.</param>
        /// <param name="properties">
        /// <para>Array of property descriptors describing static and instance data</para>
        /// <para>properties, accessors, and methods on the class See JSVM_PropertyDescriptor.</para>
        /// </param>
        /// <param name="parentClass">The parent-class of the currently defined class.</param>
        /// <param name="option_count">Number of items in an option array argument.</param>
        /// <param name="options">DefineClass options to be passed.</param>
        /// <param name="result">A JSVM_Value representing the constructor function for the class.</param>
        /// <returns>
        /// <para>Returns JSVM functions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_DefineClassWithOptions(global::OpenHarmony.NDK.Bindings.JSVM_Env env, string utf8name, ulong length, global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct constructor, ulong propertyCount, global::OpenHarmony.NDK.Bindings.JSVM_PropertyDescriptor properties, global::OpenHarmony.NDK.Bindings.JSVM_Value parentClass, ulong option_count, global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptions[] options, global::OpenHarmony.NDK.Bindings.JSVM_Value result)
        {
            var __arg0 = env is null ? __IntPtr.Zero : env.__Instance;
            var __arg3 = constructor is null ? __IntPtr.Zero : constructor.__Instance;
            var __arg5 = properties is null ? __IntPtr.Zero : properties.__Instance;
            var __arg6 = parentClass is null ? __IntPtr.Zero : parentClass.__Instance;
            global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptions.__Internal[] __options;
            if (options == null)
                __options = null;
            else
            {
                __options = new global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptions.__Internal[options.Length];
                for (int i = 0; i < __options.Length; i++)
                {
                    var __element = options[i];
                    __options[i] = __element is null ? new global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptions.__Internal() : *(global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptions.__Internal*) __element.__Instance;
                }
            }
            var __arg8 = __options;
            var ____arg9 = result is null ? __IntPtr.Zero : result.__Instance;
            var __arg9 = new __IntPtr(&____arg9);
            var ___ret = __Internal.OH_JSVM_DefineClassWithOptions(__arg0, utf8name, length, __arg3, propertyCount, __arg5, __arg6, option_count, __arg8, __arg9);
            return ___ret;
        }

        /// <summary>Add VM GC Callback.</summary>
        /// <param name="vm">The environment that the API is invoked under.</param>
        /// <param name="triggerTime">The timing of GC callback trigger.</param>
        /// <param name="handler">When Trigger gc, the callback function will be called.</param>
        /// <param name="gcType">The type of gc.</param>
        /// <param name="userData">The native pointer data.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_AddHandlerForGC(global::OpenHarmony.NDK.Bindings.JSVM_VM_ vm, global::OpenHarmony.NDK.Bindings.JSVM_CBTriggerTimeForGC triggerTime, global::OpenHarmony.NDK.Bindings.JSVM_HandlerForGC handler, global::OpenHarmony.NDK.Bindings.JSVM_GCType gcType, __IntPtr userData)
        {
            var __arg0 = vm is null ? __IntPtr.Zero : vm.__Instance;
            var __arg2 = handler == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(handler);
            var ___ret = __Internal.OH_JSVM_AddHandlerForGC(__arg0, triggerTime, __arg2, gcType, userData);
            return ___ret;
        }

        /// <summary>Remove VM GC Callback.</summary>
        /// <param name="vm">The environment that the API is invoked under.</param>
        /// <param name="triggerTime">The timing of GC callback trigger.</param>
        /// <param name="handler">When Trigger gc, the callback function will be called.</param>
        /// <param name="userData">The native pointer data.</param>
        /// <returns>
        /// <para>Returns JSVM funtions result code.</para>
        /// <para>{</para>
        /// </returns>
        public static global::OpenHarmony.NDK.Bindings.JSVM_Status OH_JSVM_RemoveHandlerForGC(global::OpenHarmony.NDK.Bindings.JSVM_VM_ vm, global::OpenHarmony.NDK.Bindings.JSVM_CBTriggerTimeForGC triggerTime, global::OpenHarmony.NDK.Bindings.JSVM_HandlerForGC handler, __IntPtr userData)
        {
            var __arg0 = vm is null ? __IntPtr.Zero : vm.__Instance;
            var __arg2 = handler == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(handler);
            var ___ret = __Internal.OH_JSVM_RemoveHandlerForGC(__arg0, triggerTime, __arg2, userData);
            return ___ret;
        }
    }

    /// <summary>JSVM_PropertyAttributes are flag used to control the behavior of properties set on a js object.</summary>
    /// <remarks>11</remarks>
    public enum JSVM_PropertyAttributes : uint
    {
        /// <summary>No explicit attributes are set on the property.</summary>
        JSVM_DEFAULT = 0,
        /// <summary>The property is writable.</summary>
        JSVM_WRITABLE = 1,
        /// <summary>The property is enumeable.</summary>
        JSVM_ENUMERABLE = 2,
        /// <summary>The property is configurable.</summary>
        JSVM_CONFIGURABLE = 4,
        /// <summary>
        /// <para>Used to mark the receiver of a native method need not be checked.</para>
        /// <para>If JSVM_NO_RECEIVER_CHECK is not set, the method only accept instance of the defined class as receiver,</para>
        /// <para>Otherwise Exception &quot;Type Error: Illegal Ivocation&quot; will be throw into JSVM.</para>
        /// </summary>
        JSVM_NO_RECEIVER_CHECK = 8,
        /// <summary>Used with OH_JSVM_DefineClass to distinguish static properties from instance properties.</summary>
        JSVM_STATIC = 1024,
        /// <summary>Default for class methods.</summary>
        JSVM_DEFAULT_METHOD = 5,
        /// <summary>Class method with no receiver check</summary>
        JSVM_METHOD_NO_RECEIVER_CHECK = 13,
        /// <summary>Default for object properties, like in JS obj[prop].</summary>
        JSVM_DEFAULT_JSPROPERTY = 7,
        /// <summary>Object properties with no receiver check</summary>
        JSVM_JSPROPERTY_NO_RECEIVER_CHECK = 15
    }

    /// <summary>Describes the type of a JSVM_Value.</summary>
    /// <remarks>11</remarks>
    public enum JSVM_ValueType : uint
    {
        /// <summary>undefined type.</summary>
        JSVM_UNDEFINED = 0,
        /// <summary>null type.</summary>
        JSVM_NULL = 1,
        /// <summary>boolean type.</summary>
        JSVM_BOOLEAN = 2,
        /// <summary>number type.</summary>
        JSVM_NUMBER = 3,
        /// <summary>string type.</summary>
        JSVM_STRING = 4,
        /// <summary>symbol type.</summary>
        JSVM_SYMBOL = 5,
        /// <summary>object type.</summary>
        JSVM_OBJECT = 6,
        /// <summary>function type.</summary>
        JSVM_FUNCTION = 7,
        /// <summary>external type.</summary>
        JSVM_EXTERNAL = 8,
        /// <summary>bigint type.</summary>
        JSVM_BIGINT = 9
    }

    /// <summary>Describes the type of a typedarray.</summary>
    /// <remarks>11</remarks>
    public enum JSVM_TypedarrayType : uint
    {
        /// <summary>int8 type.</summary>
        JSVM_INT8ARRAY = 0,
        /// <summary>uint8 type.</summary>
        JSVM_UINT8ARRAY = 1,
        /// <summary>uint8 clamped type.</summary>
        JSVM_UINT8CLAMPED_ARRAY = 2,
        /// <summary>int16 type.</summary>
        JSVM_INT16ARRAY = 3,
        /// <summary>uint16 type.</summary>
        JSVM_UINT16ARRAY = 4,
        /// <summary>int32 type.</summary>
        JSVM_INT32ARRAY = 5,
        /// <summary>uint32 type.</summary>
        JSVM_UINT32ARRAY = 6,
        /// <summary>float32 type.</summary>
        JSVM_FLOAT32ARRAY = 7,
        /// <summary>float64 type.</summary>
        JSVM_FLOAT64ARRAY = 8,
        /// <summary>bigint64 type.</summary>
        JSVM_BIGINT64ARRAY = 9,
        /// <summary>biguint64 type.</summary>
        JSVM_BIGUINT64ARRAY = 10
    }

    /// <summary>Integral status code indicating the success or failure of a JSVM-API call.</summary>
    /// <remarks>11</remarks>
    public enum JSVM_Status : uint
    {
        /// <summary>success status.</summary>
        JSVM_OK = 0,
        /// <summary>invalidarg status.</summary>
        JSVM_INVALID_ARG = 1,
        /// <summary>object expected status.</summary>
        JSVM_OBJECT_EXPECTED = 2,
        /// <summary>string expected status.</summary>
        JSVM_STRING_EXPECTED = 3,
        /// <summary>name expected status.</summary>
        JSVM_NAME_EXPECTED = 4,
        /// <summary>function expected status.</summary>
        JSVM_FUNCTION_EXPECTED = 5,
        /// <summary>number expected status.</summary>
        JSVM_NUMBER_EXPECTED = 6,
        /// <summary>boolean expected status.</summary>
        JSVM_BOOLEAN_EXPECTED = 7,
        /// <summary>array expected status.</summary>
        JSVM_ARRAY_EXPECTED = 8,
        /// <summary>generic failure status.</summary>
        JSVM_GENERIC_FAILURE = 9,
        /// <summary>pending exception status.</summary>
        JSVM_PENDING_EXCEPTION = 10,
        /// <summary>cancelled status.</summary>
        JSVM_CANCELLED = 11,
        /// <summary>escape called twice status.</summary>
        JSVM_ESCAPE_CALLED_TWICE = 12,
        /// <summary>handle scope mismatch status.</summary>
        JSVM_HANDLE_SCOPE_MISMATCH = 13,
        /// <summary>callback scope mismatch status.</summary>
        JSVM_CALLBACK_SCOPE_MISMATCH = 14,
        /// <summary>queue full status.</summary>
        JSVM_QUEUE_FULL = 15,
        /// <summary>closing status.</summary>
        JSVM_CLOSING = 16,
        /// <summary>bigint expected status.</summary>
        JSVM_BIGINT_EXPECTED = 17,
        /// <summary>date expected status.</summary>
        JSVM_DATE_EXPECTED = 18,
        /// <summary>arraybuffer expected status.</summary>
        JSVM_ARRAYBUFFER_EXPECTED = 19,
        /// <summary>detachable arraybuffer expected status.</summary>
        JSVM_DETACHABLE_ARRAYBUFFER_EXPECTED = 20,
        /// <summary>would deadlock status.</summary>
        JSVM_WOULD_DEADLOCK = 21,
        /// <summary>no external buffers allowed status.</summary>
        JSVM_NO_EXTERNAL_BUFFERS_ALLOWED = 22,
        /// <summary>cannot run +js status.</summary>
        JSVM_CANNOT_RUN_JS = 23,
        /// <summary>invalid input type status.</summary>
        /// <remarks>18</remarks>
        JSVM_INVALID_TYPE = 24,
        /// <summary>jit mode expected status.</summary>
        /// <remarks>18</remarks>
        JSVM_JIT_MODE_EXPECTED = 25
    }

    /// <summary>limits the range of collected properties..</summary>
    /// <remarks>11</remarks>
    public enum JSVM_KeyCollectionMode : uint
    {
        /// <summary>will include all keys of the objects's prototype chain as well.</summary>
        JSVM_KEY_INCLUDE_PROTOTYPES = 0,
        /// <summary>limits the collected properties to the given object only.</summary>
        JSVM_KEY_OWN_ONLY = 1
    }

    /// <summary>Property filter bits. They can be or'ed to build a composite filter..</summary>
    /// <remarks>11</remarks>
    [Flags]
    public enum JSVM_KeyFilter : uint
    {
        /// <summary>key all properties.</summary>
        JSVM_KEY_ALL_PROPERTIES = 0,
        /// <summary>key writable.</summary>
        JSVM_KEY_WRITABLE = 1,
        /// <summary>key enumerable.</summary>
        JSVM_KEY_ENUMERABLE = 2,
        /// <summary>key configurable.</summary>
        JSVM_KEY_CONFIGURABLE = 4,
        /// <summary>key skip strings.</summary>
        JSVM_KEY_SKIP_STRINGS = 8,
        /// <summary>key skip symbols.</summary>
        JSVM_KEY_SKIP_SYMBOLS = 16
    }

    /// <summary>key conversion select.</summary>
    /// <remarks>11</remarks>
    public enum JSVM_KeyConversion : uint
    {
        /// <summary>will return numbers for integer indices.</summary>
        JSVM_KEY_KEEP_NUMBERS = 0,
        /// <summary>will convert integer indices to strings.</summary>
        JSVM_KEY_NUMBERS_TO_STRINGS = 1
    }

    /// <summary>Memory pressure level.</summary>
    /// <remarks>11</remarks>
    public enum JSVM_MemoryPressureLevel : uint
    {
        /// <summary>none pressure.</summary>
        JSVM_MEMORY_PRESSURE_LEVEL_NONE = 0,
        /// <summary>moderate pressure.</summary>
        JSVM_MEMORY_PRESSURE_LEVEL_MODERATE = 1,
        /// <summary>critical pressure.</summary>
        JSVM_MEMORY_PRESSURE_LEVEL_CRITICAL = 2
    }

    /// <summary>Compile mode</summary>
    /// <remarks>12</remarks>
    public enum JSVM_CompileMode : uint
    {
        /// <summary>default mode.</summary>
        JSVM_COMPILE_MODE_DEFAULT = 0,
        /// <summary>consume code cache.</summary>
        JSVM_COMPILE_MODE_CONSUME_CODE_CACHE = 1,
        /// <summary>apply eager compile.</summary>
        JSVM_COMPILE_MODE_EAGER_COMPILE = 2,
        /// <summary>preset for compile profile.</summary>
        JSVM_COMPILE_MODE_PRODUCE_COMPILE_PROFILE = 3,
        /// <summary>consume compile profile.</summary>
        JSVM_COMPILE_MODE_CONSUME_COMPILE_PROFILE = 4
    }

    /// <summary>Compile option id</summary>
    /// <remarks>12</remarks>
    public enum JSVM_CompileOptionId : uint
    {
        /// <summary>compile mode.</summary>
        JSVM_COMPILE_MODE = 0,
        /// <summary>code cache content.</summary>
        JSVM_COMPILE_CODE_CACHE = 1,
        /// <summary>script origin.</summary>
        JSVM_COMPILE_SCRIPT_ORIGIN = 2,
        /// <summary>compile profile content.</summary>
        JSVM_COMPILE_COMPILE_PROFILE = 3,
        /// <summary>switch for source map support.</summary>
        JSVM_COMPILE_ENABLE_SOURCE_MAP = 4
    }

    /// <summary>Regular expression flag bits. They can be or'ed to enable a set of flags.</summary>
    /// <remarks>12</remarks>
    [Flags]
    public enum JSVM_RegExpFlags : uint
    {
        /// <summary>None mode.</summary>
        JSVM_REGEXP_NONE = 0,
        /// <summary>Global mode.</summary>
        JSVM_REGEXP_GLOBAL = 1,
        /// <summary>Ignore Case mode.</summary>
        JSVM_REGEXP_IGNORE_CASE = 2,
        /// <summary>Multiline mode.</summary>
        JSVM_REGEXP_MULTILINE = 4,
        /// <summary>Sticky mode.</summary>
        JSVM_REGEXP_STICKY = 8,
        /// <summary>Unicode mode.</summary>
        JSVM_REGEXP_UNICODE = 16,
        /// <summary>dotAll mode.</summary>
        JSVM_REGEXP_DOT_ALL = 32,
        /// <summary>Linear mode.</summary>
        JSVM_REGEXP_LINEAR = 64,
        /// <summary>Has Indices mode.</summary>
        JSVM_REGEXP_HAS_INDICES = 128,
        /// <summary>Unicode Sets mode.</summary>
        JSVM_REGEXP_UNICODE_SETS = 256
    }

    /// <summary>initialization flag</summary>
    /// <remarks>12</remarks>
    public enum JSVM_InitializedFlag : uint
    {
        /// <summary>initialize with zero.</summary>
        JSVM_ZERO_INITIALIZED = 0,
        /// <summary>leave uninitialized.</summary>
        JSVM_UNINITIALIZED = 1
    }

    /// <summary>WebAssembly function optimization level</summary>
    /// <remarks>12</remarks>
    public enum JSVM_WasmOptLevel : uint
    {
        /// <summary>baseline optimization level.</summary>
        JSVM_WASM_OPT_BASELINE = 10,
        /// <summary>high optimization level.</summary>
        JSVM_WASM_OPT_HIGH = 20
    }

    /// <summary>Cache data type</summary>
    /// <remarks>12</remarks>
    public enum JSVM_CacheType : uint
    {
        /// <summary>js code cache, generated by OH_JSVM_CreateCodeCache</summary>
        JSVM_CACHE_TYPE_JS = 0,
        /// <summary>WebAssembly cache, generated by OH_JSVM_CreateWasmCache</summary>
        JSVM_CACHE_TYPE_WASM = 1
    }

    /// <summary>Microtask policies of JSVM.</summary>
    /// <remarks>18</remarks>
    public enum JSVM_MicrotaskPolicy : uint
    {
        /// <summary>Microtasks are invoked with the OH_JSVM_PerformMicrotaskCheckpoint() method.</summary>
        JSVM_MICROTASK_EXPLICIT = 0,
        /// <summary>
        /// <para>Microtasks are invoked when the script call depth decrements to zero.</para>
        /// <para>Default mode.</para>
        /// </summary>
        JSVM_MICROTASK_AUTO = 1
    }

    /// <summary>Trace category for jsvm internal trace events.</summary>
    /// <remarks>18</remarks>
    public enum JSVM_TraceCategory : uint
    {
        /// <summary>Tracing main interface invoking of JSVM, such as run scripts.</summary>
        JSVM_TRACE_VM = 0,
        /// <summary>Tracing interface invoking about compilation, such as CompileCodeBackground.</summary>
        JSVM_TRACE_COMPILE = 1,
        /// <summary>Tracing interface invoking about execution status, such as Interrupts and Microtasks.</summary>
        JSVM_TRACE_EXECUTE = 2,
        /// <summary>Tracing external callback</summary>
        JSVM_TRACE_RUNTIME = 3,
        /// <summary>Tracing stack trace in JSVM.</summary>
        JSVM_TRACE_STACK_TRACE = 4,
        /// <summary>Tracing Main interface invoking of WASM, such as Compile Wasm Module and Instantiate.</summary>
        JSVM_TRACE_WASM = 5,
        /// <summary>Tracing more detailed interface invoking of WASM, such as background compilation and wrappers.</summary>
        JSVM_TRACE_WASM_DETAILED = 6
    }

    /// <summary>The promise-reject event.</summary>
    /// <remarks>18</remarks>
    public enum JSVM_PromiseRejectEvent : uint
    {
        /// <summary>Promise is rejected for other reasons.</summary>
        JSVM_PROMISE_REJECT_OTHER_REASONS = 0,
        /// <summary>Promise rejected with no handler.</summary>
        JSVM_PROMISE_REJECT_WITH_NO_HANDLER = 1,
        /// <summary>Add the handler after Promise has been rejected.</summary>
        JSVM_PROMISE_ADD_HANDLER_AFTER_REJECTED = 2,
        /// <summary>After the Promise has been resolved, try to reject the Promise again.</summary>
        JSVM_PROMISE_REJECT_AFTER_RESOLVED = 3,
        /// <summary>After the Promise has been resolved, try resolving the Promise again.</summary>
        JSVM_PROMISE_RESOLVE_AFTER_RESOLVED = 4
    }

    /// <summary>The level of message error.</summary>
    /// <remarks>18</remarks>
    public enum JSVM_MessageErrorLevel : uint
    {
        /// <summary>Log level message.</summary>
        JSVM_MESSAGE_LOG = 1,
        /// <summary>Debug level message.</summary>
        JSVM_MESSAGE_DEBUG = 2,
        /// <summary>Info level message.</summary>
        JSVM_MESSAGE_INFO = 4,
        /// <summary>Error level message.</summary>
        JSVM_MESSAGE_ERROR = 8,
        /// <summary>Warning level message.</summary>
        JSVM_MESSAGE_WARNING = 16,
        /// <summary>All level message.</summary>
        JSVM_MESSAGE_ALL = 31
    }

    /// <summary>DefineClass options id.</summary>
    /// <remarks>18</remarks>
    public enum JSVM_DefineClassOptionsId : uint
    {
        /// <summary>Defining a class in normal mode.</summary>
        JSVM_DEFINE_CLASS_NORMAL = 0,
        /// <summary>Defining a class with count.</summary>
        JSVM_DEFINE_CLASS_WITH_COUNT = 1,
        /// <summary>Defining a class with property handler.</summary>
        JSVM_DEFINE_CLASS_WITH_PROPERTY_HANDLER = 2
    }

    /// <summary>The timing of GC callback trigger.</summary>
    /// <remarks>18</remarks>
    public enum JSVM_CBTriggerTimeForGC : uint
    {
        /// <summary>Trigger GC callback before GC.</summary>
        JSVM_CB_TRIGGER_BEFORE_GC = 0,
        /// <summary>Trigger GC callback after GC.</summary>
        JSVM_CB_TRIGGER_AFTER_GC = 1
    }

    /// <summary>The GC type.</summary>
    /// <remarks>18</remarks>
    public enum JSVM_GCType : uint
    {
        /// <summary>The GC algorithm is Scavenge.</summary>
        JSVM_GC_TYPE_SCAVENGE = 1,
        /// <summary>The GC algorithm is Minor-Mark-Compact.</summary>
        JSVM_GC_TYPE_MINOR_MARK_COMPACT = 2,
        /// <summary>The GC algorithm is Mark-Sweep-Compact.</summary>
        JSVM_GC_TYPE_MARK_SWEEP_COMPACT = 4,
        /// <summary>The GC algorithm is Incremental-Marking.</summary>
        JSVM_GC_TYPE_INCREMENTAL_MARKING = 8,
        /// <summary>The GC algorithm is Weak-Callbacks.</summary>
        JSVM_GC_TYPE_PROCESS_WEAK_CALLBACKS = 16,
        /// <summary>All GC algorithm.</summary>
        JSVM_GC_TYPE_ALL = 31
    }

    /// <summary>The GC callback flags.</summary>
    /// <remarks>18</remarks>
    public enum JSVM_GCCallbackFlags : uint
    {
        /// <summary>No GC callback falgs.</summary>
        JSVM_NO_GC_CALLBACK_FLAGS = 0,
        /// <summary>Reserved object information will be built in the garbage collection callback.</summary>
        JSVM_GC_CALLBACK_CONSTRUCT_RETAINED_OBJECT_INFOS = 1,
        /// <summary>Enforce Garbage Collection Callback.</summary>
        JSVM_GC_CALLBACK_FORCED = 2,
        /// <summary>Synchronous phantom callback processing.</summary>
        JSVM_GC_CALLBACK_SYNCHRONOUS_PHANTOM_CALLBACK_PROCESSING = 3,
        /// <summary>All available garbage objects are collected during garbage collection.</summary>
        JSVM_GC_CALLBACK_COLLECT_ALL_AVAILABLE_GARBAGE = 4,
        /// <summary>Garbage collection collects all external memory.</summary>
        JSVM_GC_CALLBACK_COLLECT_ALL_EXTERNAL_MEMORY = 5,
        /// <summary>Schedule Garbage Collection at Idle Time.</summary>
        JSVM_GC_CALLBACK_SCHEDULE_IDLE_GARBAGE_COLLECTION = 6
    }

    /// <summary>To represent a JavaScript VM instance.</summary>
    /// <remarks>11</remarks>
    /// <summary>To represent a JavaScript VM scope.</summary>
    /// <remarks>11</remarks>
    /// <summary>To represent a JavaScript VM environment scope.</summary>
    /// <remarks>11</remarks>
    /// <summary>To represent a JavaScript code.</summary>
    /// <remarks>11</remarks>
    /// <summary>To represent a JavaScript VM instance.</summary>
    /// <remarks>11</remarks>
    /// <summary>To represent a JavaScript profiler.</summary>
    /// <remarks>12</remarks>
    /// <summary>To represent a JavaScript VM environment.</summary>
    /// <remarks>11</remarks>
    /// <summary>To represent a JavaScript value references.</summary>
    /// <remarks>11</remarks>
    /// <summary>To represent a JavaScript VM handle scope.</summary>
    /// <remarks>11</remarks>
    /// <summary>To represent a JavaScript VM escapable handle scope.</summary>
    /// <remarks>11</remarks>
    /// <summary>To represent a JavaScript VM callback additional information.</summary>
    /// <remarks>11</remarks>
    /// <summary>To represent a JavaScript VM value deferred.</summary>
    /// <remarks>11</remarks>
    /// <summary>Callback function pointer and data for user-provided native function which are to exposed to js via JSVM-API.</summary>
    /// <remarks>11</remarks>
    /// <summary>Function pointer type for user-provided native function which are to exposed to js via JSVM-API.</summary>
    /// <remarks>11</remarks>
    /// <summary>Function pointer type for add-on provided function that allow the user to be notified.</summary>
    /// <remarks>11</remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void JSVM_Finalize(__IntPtr env, __IntPtr finalizeData, __IntPtr finalizeHint);

    /// <summary>
    /// <para>Function pointer type for callback of ASCII output stream. The first parameter data is the data pointer.</para>
    /// <para>And the second parameter size is the data size to output. A null data pointer indicates the end of the stream.</para>
    /// <para>The third parameter streamData is the pointer passed in together with the callback to the API functions that</para>
    /// <para>generate data to the output stream. The callback returns true to indicate the stream can continue to accept</para>
    /// <para>data. Otherwise, it will abort the stream.</para>
    /// </summary>
    /// <remarks>12</remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    [return: MarshalAs(UnmanagedType.I1)]
    public unsafe delegate bool JSVM_OutputStream([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string data, int size, __IntPtr streamData);

    /// <summary>JSVM_PropertyAttributes are flag used to control the behavior of properties set on a js object.</summary>
    /// <remarks>11</remarks>
    /// <summary>Describes the type of a JSVM_Value.</summary>
    /// <remarks>11</remarks>
    /// <summary>Describes the type of a typedarray.</summary>
    /// <remarks>11</remarks>
    /// <summary>Integral status code indicating the success or failure of a JSVM-API call.</summary>
    /// <remarks>11</remarks>
    /// <summary>limits the range of collected properties..</summary>
    /// <remarks>11</remarks>
    /// <summary>Property filter bits. They can be or'ed to build a composite filter..</summary>
    /// <remarks>11</remarks>
    /// <summary>key conversion select.</summary>
    /// <remarks>11</remarks>
    /// <summary>Memory pressure level.</summary>
    /// <remarks>11</remarks>
    /// <summary>Compile mode</summary>
    /// <remarks>12</remarks>
    /// <summary>Compile option id</summary>
    /// <remarks>12</remarks>
    /// <summary>Heap statisics.</summary>
    /// <remarks>12</remarks>
    /// <summary>Init the JavaScript VM with init option.</summary>
    /// <remarks>11</remarks>
    /// <summary>Create the JavaScript VM with init option.</summary>
    /// <remarks>11</remarks>
    /// <summary>JavaScript VM info.</summary>
    /// <remarks>11</remarks>
    /// <summary>Property descriptor.</summary>
    /// <remarks>11</remarks>
    /// <summary>JSVM-API uses both return values and JavaScript exceptions for error handling</summary>
    /// <remarks>11</remarks>
    /// <summary>
    /// <para>A 128-bit value stored as two unsigned 64-bit integers.</para>
    /// <para>It serves as a UUID with which JavaScript objects or externals can be &quot;tagged&quot;</para>
    /// <para>in order to ensure that they are of a certain type.</para>
    /// </summary>
    /// <remarks>11</remarks>
    /// <summary>
    /// <para>When the object's getter, setter, deleter, and enumerator operations are performed, the corresponding</para>
    /// <para>callback will be triggered.</para>
    /// </summary>
    /// <remarks>12</remarks>
    /// <summary>The pointer type of the structure which contains the property handlers.</summary>
    /// <remarks>12</remarks>
    /// <summary>Source code information.</summary>
    /// <remarks>12</remarks>
    /// <summary>Compile Options</summary>
    /// <remarks>12</remarks>
    /// <summary>code cache passed with JSVM_COMPILE_CODE_CACHE</summary>
    /// <remarks>12</remarks>
    /// <summary>compile profile passed with JSVM_COMPILE_COMPILE_PROFILE</summary>
    /// <remarks>12</remarks>
    /// <summary>Regular expression flag bits. They can be or'ed to enable a set of flags.</summary>
    /// <remarks>12</remarks>
    /// <summary>initialization flag</summary>
    /// <remarks>12</remarks>
    /// <summary>WebAssembly function optimization level</summary>
    /// <remarks>12</remarks>
    /// <summary>Cache data type</summary>
    /// <remarks>12</remarks>
    /// <summary>Microtask policies of JSVM.</summary>
    /// <remarks>18</remarks>
    /// <summary>Trace category for jsvm internal trace events.</summary>
    /// <remarks>18</remarks>
    /// <summary>The promise-reject event.</summary>
    /// <remarks>18</remarks>
    /// <summary>The level of message error.</summary>
    /// <remarks>18</remarks>
    /// <summary>Function pointer type of OOM-Error callback.</summary>
    /// <param name="location">The location information of the OOM error.</param>
    /// <param name="detail">The detail of the OOM error.</param>
    /// <param name="isHeapOOM">Determine whether the OOM type is Heap OOM.</param>
    /// <remarks>18</remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void JSVM_HandlerForOOMError([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string location, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string detail, [MarshalAs(UnmanagedType.I1)] bool isHeapOOM);

    /// <summary>Function pointer type of Fatal-Error callback.</summary>
    /// <param name="location">The location information of the Fatal error.</param>
    /// <param name="message">The message of the Fatal error.</param>
    /// <remarks>18</remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void JSVM_HandlerForFatalError([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string location, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string message);

    /// <summary>Function pointer type of Promise-Reject callback.</summary>
    /// <param name="env">The environment that the function is invoked under.</param>
    /// <param name="rejectEvent">The promise-reject event.</param>
    /// <param name="rejectInfo">
    /// <para>An JS-object containing two properties: 'promise' and 'value'.</para>
    /// <para>The 'promise' represents a reference to the Promise object that was rejected.</para>
    /// <para>The 'value' represents the rejection reason associated with that promise.</para>
    /// </param>
    /// <remarks>18</remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void JSVM_HandlerForPromiseReject(__IntPtr env, global::OpenHarmony.NDK.Bindings.JSVM_PromiseRejectEvent rejectEvent, __IntPtr rejectInfo);

    /// <summary>DefineClass options id.</summary>
    /// <remarks>18</remarks>
    /// <summary>DefineClass options.</summary>
    /// <remarks>18</remarks>
    /// <summary>The property-handler used to define class.</summary>
    /// <remarks>18</remarks>
    /// <summary>The timing of GC callback trigger.</summary>
    /// <remarks>18</remarks>
    /// <summary>The GC type.</summary>
    /// <remarks>18</remarks>
    /// <summary>The GC callback flags.</summary>
    /// <remarks>18</remarks>
    /// <summary>Function pointer type of GC callback.</summary>
    /// <param name="vm">The VM instance that the JSVM-API call is invoked under.</param>
    /// <param name="gcType">The gc type.</param>
    /// <param name="flags">The GC callback flags.</param>
    /// <param name="data">The native pointer data.</param>
    /// <remarks>18</remarks>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void JSVM_HandlerForGC(__IntPtr vm, global::OpenHarmony.NDK.Bindings.JSVM_GCType gcType, global::OpenHarmony.NDK.Bindings.JSVM_GCCallbackFlags flags, __IntPtr data);

    /// <summary>To represent a JavaScript Data type.</summary>
    /// <remarks>18</remarks>
    public unsafe partial class JSVM_VM_
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_VM_> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_VM_>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_VM_ managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_VM_ managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_VM_ __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_VM_(native.ToPointer(), skipVTables);
        }

        internal static JSVM_VM_ __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_VM_)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_VM_ __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_VM_(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_VM_(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_VM_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class JSVM_VMScope
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_VMScope> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_VMScope>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_VMScope managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_VMScope managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_VMScope __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_VMScope(native.ToPointer(), skipVTables);
        }

        internal static JSVM_VMScope __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_VMScope)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_VMScope __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_VMScope(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_VMScope(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_VMScope(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class JSVM_EnvScope
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_EnvScope> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_EnvScope>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_EnvScope managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_EnvScope managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_EnvScope __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_EnvScope(native.ToPointer(), skipVTables);
        }

        internal static JSVM_EnvScope __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_EnvScope)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_EnvScope __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_EnvScope(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_EnvScope(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_EnvScope(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class JSVM_Script
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_Script> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_Script>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_Script managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_Script managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_Script __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_Script(native.ToPointer(), skipVTables);
        }

        internal static JSVM_Script __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_Script)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_Script __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_Script(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_Script(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_Script(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class JSVM_Env
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_Env> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_Env>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_Env managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_Env managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_Env __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_Env(native.ToPointer(), skipVTables);
        }

        internal static JSVM_Env __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_Env)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_Env __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_Env(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_Env(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_Env(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class JSVM_CpuProfiler
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_CpuProfiler> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_CpuProfiler>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_CpuProfiler managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_CpuProfiler managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_CpuProfiler __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_CpuProfiler(native.ToPointer(), skipVTables);
        }

        internal static JSVM_CpuProfiler __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_CpuProfiler)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_CpuProfiler __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_CpuProfiler(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_CpuProfiler(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_CpuProfiler(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class JSVM_Value
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_Value> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_Value>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_Value managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_Value managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_Value __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_Value(native.ToPointer(), skipVTables);
        }

        internal static JSVM_Value __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_Value)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_Value __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_Value(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_Value(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_Value(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class JSVM_Ref
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_Ref> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_Ref>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_Ref managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_Ref managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_Ref __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_Ref(native.ToPointer(), skipVTables);
        }

        internal static JSVM_Ref __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_Ref)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_Ref __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_Ref(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_Ref(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_Ref(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class JSVM_HandleScope
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_HandleScope> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_HandleScope>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_HandleScope managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_HandleScope managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_HandleScope __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_HandleScope(native.ToPointer(), skipVTables);
        }

        internal static JSVM_HandleScope __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_HandleScope)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_HandleScope __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_HandleScope(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_HandleScope(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_HandleScope(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class JSVM_EscapableHandleScope
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_EscapableHandleScope> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_EscapableHandleScope>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_EscapableHandleScope managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_EscapableHandleScope managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_EscapableHandleScope __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_EscapableHandleScope(native.ToPointer(), skipVTables);
        }

        internal static JSVM_EscapableHandleScope __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_EscapableHandleScope)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_EscapableHandleScope __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_EscapableHandleScope(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_EscapableHandleScope(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_EscapableHandleScope(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class JSVM_CallbackInfo
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_CallbackInfo> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_CallbackInfo>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_CallbackInfo managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_CallbackInfo managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_CallbackInfo __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_CallbackInfo(native.ToPointer(), skipVTables);
        }

        internal static JSVM_CallbackInfo __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_CallbackInfo)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_CallbackInfo __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_CallbackInfo(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_CallbackInfo(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_CallbackInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class JSVM_Deferred
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_Deferred> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_Deferred>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_Deferred managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_Deferred managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_Deferred __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_Deferred(native.ToPointer(), skipVTables);
        }

        internal static JSVM_Deferred __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_Deferred)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_Deferred __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_Deferred(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_Deferred(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_Deferred(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    /// <summary>Callback function pointer and data for user-provided native function which are to exposed to js via JSVM-API.</summary>
    /// <remarks>11</remarks>
    public unsafe partial class JSVM_CallbackStruct : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal __IntPtr callback;
            internal __IntPtr data;

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "_ZN19JSVM_CallbackStructC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_CallbackStruct __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_CallbackStruct(native.ToPointer(), skipVTables);
        }

        internal static JSVM_CallbackStruct __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_CallbackStruct)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_CallbackStruct __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_CallbackStruct(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_CallbackStruct(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_CallbackStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public JSVM_CallbackStruct()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public JSVM_CallbackStruct(global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct.__Internal*) __Instance) = *((global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr Callback
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->callback;
                return __ptr0 == IntPtr.Zero? null : (global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->callback = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public __IntPtr Data
        {
            get
            {
                return ((__Internal*)__Instance)->data;
            }

            set
            {
                ((__Internal*)__Instance)->data = (__IntPtr) value;
            }
        }
    }

    public unsafe partial class JSVM_Data
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_Data> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_Data>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_Data managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_Data managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_Data __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_Data(native.ToPointer(), skipVTables);
        }

        internal static JSVM_Data __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_Data)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_Data __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_Data(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_Data(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_Data(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    /// <summary>Heap statisics.</summary>
    /// <remarks>12</remarks>
    public unsafe partial class JSVM_HeapStatistics : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 104)]
        public partial struct __Internal
        {
            internal ulong totalHeapSize;
            internal ulong totalHeapSizeExecutable;
            internal ulong totalPhysicalSize;
            internal ulong totalAvailableSize;
            internal ulong usedHeapSize;
            internal ulong heapSizeLimit;
            internal ulong mallocedMemory;
            internal ulong externalMemory;
            internal ulong peakMallocedMemory;
            internal ulong numberOfNativeContexts;
            internal ulong numberOfDetachedContexts;
            internal ulong totalGlobalHandlesSize;
            internal ulong usedGlobalHandlesSize;

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "_ZN19JSVM_HeapStatisticsC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_HeapStatistics> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_HeapStatistics>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_HeapStatistics managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_HeapStatistics managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_HeapStatistics __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_HeapStatistics(native.ToPointer(), skipVTables);
        }

        internal static JSVM_HeapStatistics __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_HeapStatistics)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_HeapStatistics __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_HeapStatistics(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_HeapStatistics(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_HeapStatistics(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public JSVM_HeapStatistics()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_HeapStatistics.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public JSVM_HeapStatistics(global::OpenHarmony.NDK.Bindings.JSVM_HeapStatistics _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_HeapStatistics.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::OpenHarmony.NDK.Bindings.JSVM_HeapStatistics.__Internal*) __Instance) = *((global::OpenHarmony.NDK.Bindings.JSVM_HeapStatistics.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>the size of the total heap.</summary>
        public ulong TotalHeapSize
        {
            get
            {
                return ((__Internal*)__Instance)->totalHeapSize;
            }

            set
            {
                ((__Internal*)__Instance)->totalHeapSize = value;
            }
        }

        /// <summary>the executable size of the total heap.</summary>
        public ulong TotalHeapSizeExecutable
        {
            get
            {
                return ((__Internal*)__Instance)->totalHeapSizeExecutable;
            }

            set
            {
                ((__Internal*)__Instance)->totalHeapSizeExecutable = value;
            }
        }

        /// <summary>the physical size of the total heap.</summary>
        public ulong TotalPhysicalSize
        {
            get
            {
                return ((__Internal*)__Instance)->totalPhysicalSize;
            }

            set
            {
                ((__Internal*)__Instance)->totalPhysicalSize = value;
            }
        }

        /// <summary>the available size of the total heap.</summary>
        public ulong TotalAvailableSize
        {
            get
            {
                return ((__Internal*)__Instance)->totalAvailableSize;
            }

            set
            {
                ((__Internal*)__Instance)->totalAvailableSize = value;
            }
        }

        /// <summary>used size of the heap.</summary>
        public ulong UsedHeapSize
        {
            get
            {
                return ((__Internal*)__Instance)->usedHeapSize;
            }

            set
            {
                ((__Internal*)__Instance)->usedHeapSize = value;
            }
        }

        /// <summary>heap size limit.</summary>
        public ulong HeapSizeLimit
        {
            get
            {
                return ((__Internal*)__Instance)->heapSizeLimit;
            }

            set
            {
                ((__Internal*)__Instance)->heapSizeLimit = value;
            }
        }

        /// <summary>memory requested by the heap.</summary>
        public ulong MallocedMemory
        {
            get
            {
                return ((__Internal*)__Instance)->mallocedMemory;
            }

            set
            {
                ((__Internal*)__Instance)->mallocedMemory = value;
            }
        }

        /// <summary>heap-requested external memory.</summary>
        public ulong ExternalMemory
        {
            get
            {
                return ((__Internal*)__Instance)->externalMemory;
            }

            set
            {
                ((__Internal*)__Instance)->externalMemory = value;
            }
        }

        /// <summary>peak memory requested by the heap.</summary>
        public ulong PeakMallocedMemory
        {
            get
            {
                return ((__Internal*)__Instance)->peakMallocedMemory;
            }

            set
            {
                ((__Internal*)__Instance)->peakMallocedMemory = value;
            }
        }

        /// <summary>the number of native contexts.</summary>
        public ulong NumberOfNativeContexts
        {
            get
            {
                return ((__Internal*)__Instance)->numberOfNativeContexts;
            }

            set
            {
                ((__Internal*)__Instance)->numberOfNativeContexts = value;
            }
        }

        /// <summary>the number of detached contexts.</summary>
        public ulong NumberOfDetachedContexts
        {
            get
            {
                return ((__Internal*)__Instance)->numberOfDetachedContexts;
            }

            set
            {
                ((__Internal*)__Instance)->numberOfDetachedContexts = value;
            }
        }

        /// <summary>the size of the total global handles.</summary>
        public ulong TotalGlobalHandlesSize
        {
            get
            {
                return ((__Internal*)__Instance)->totalGlobalHandlesSize;
            }

            set
            {
                ((__Internal*)__Instance)->totalGlobalHandlesSize = value;
            }
        }

        /// <summary>the size of the used global handles.</summary>
        public ulong UsedGlobalHandlesSize
        {
            get
            {
                return ((__Internal*)__Instance)->usedGlobalHandlesSize;
            }

            set
            {
                ((__Internal*)__Instance)->usedGlobalHandlesSize = value;
            }
        }
    }

    /// <summary>Init the JavaScript VM with init option.</summary>
    /// <remarks>11</remarks>
    public unsafe partial class JSVM_InitOptions : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public partial struct __Internal
        {
            internal __IntPtr externalReferences;
            internal __IntPtr argc;
            internal __IntPtr argv;
            internal byte removeFlags;

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "_ZN16JSVM_InitOptionsC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_InitOptions> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_InitOptions>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_InitOptions managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_InitOptions managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_InitOptions __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_InitOptions(native.ToPointer(), skipVTables);
        }

        internal static JSVM_InitOptions __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_InitOptions)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_InitOptions __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_InitOptions(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_InitOptions(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_InitOptions(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public JSVM_InitOptions()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_InitOptions.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public JSVM_InitOptions(global::OpenHarmony.NDK.Bindings.JSVM_InitOptions _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_InitOptions.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::OpenHarmony.NDK.Bindings.JSVM_InitOptions.__Internal*) __Instance) = *((global::OpenHarmony.NDK.Bindings.JSVM_InitOptions.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>
        /// <para>Optional nullptr-terminated array of raw adddresses in the embedder that the</para>
        /// <para>VM can match against during serialization and use for deserialization. This</para>
        /// <para>array and its content must stay valid for the entire lifetime of the VM</para>
        /// <para>instance.</para>
        /// </summary>
        public long* ExternalReferences
        {
            get
            {
                return (long*) ((__Internal*)__Instance)->externalReferences;
            }
        }

        /// <summary>
        /// <para>Flags for the VM. IF removeFlags is true, recognized flags will be removed</para>
        /// <para>from (argc, argv). Note that these flags are specific to VM.</para>
        /// <para>They are mainly used for development. Do not include them in production as</para>
        /// <para>they might not take effect if the VM is different from the development</para>
        /// <para>environment.</para>
        /// </summary>
        public int* Argc
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->argc;
            }

            set
            {
                ((__Internal*)__Instance)->argc = (__IntPtr) value;
            }
        }

        /// <summary>argv .</summary>
        public sbyte** Argv
        {
            get
            {
                return (sbyte**) ((__Internal*)__Instance)->argv;
            }

            set
            {
                ((__Internal*)__Instance)->argv = (__IntPtr) value;
            }
        }

        /// <summary>remove flags.</summary>
        public bool RemoveFlags
        {
            get
            {
                return ((__Internal*)__Instance)->removeFlags != 0;
            }

            set
            {
                ((__Internal*)__Instance)->removeFlags = (byte) (value ? 1 : 0);
            }
        }
    }

    /// <summary>Create the JavaScript VM with init option.</summary>
    /// <remarks>11</remarks>
    public unsafe partial class JSVM_CreateVMOptions : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 56)]
        public partial struct __Internal
        {
            internal ulong maxOldGenerationSize;
            internal ulong maxYoungGenerationSize;
            internal ulong initialOldGenerationSize;
            internal ulong initialYoungGenerationSize;
            internal __IntPtr snapshotBlobData;
            internal ulong snapshotBlobSize;
            internal byte isForSnapshotting;

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "_ZN20JSVM_CreateVMOptionsC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_CreateVMOptions> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_CreateVMOptions>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_CreateVMOptions managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_CreateVMOptions managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __snapshotBlobData_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static JSVM_CreateVMOptions __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_CreateVMOptions(native.ToPointer(), skipVTables);
        }

        internal static JSVM_CreateVMOptions __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_CreateVMOptions)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_CreateVMOptions __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_CreateVMOptions(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_CreateVMOptions(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_CreateVMOptions(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public JSVM_CreateVMOptions()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_CreateVMOptions.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public JSVM_CreateVMOptions(global::OpenHarmony.NDK.Bindings.JSVM_CreateVMOptions _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_CreateVMOptions.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::OpenHarmony.NDK.Bindings.JSVM_CreateVMOptions.__Internal*) __Instance) = *((global::OpenHarmony.NDK.Bindings.JSVM_CreateVMOptions.__Internal*) _0.__Instance);
            if (_0.__snapshotBlobData_OwnsNativeMemory)
                this.SnapshotBlobData = _0.SnapshotBlobData;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__snapshotBlobData_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->snapshotBlobData);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>optional limits of memory use of the vm.</summary>
        public ulong MaxOldGenerationSize
        {
            get
            {
                return ((__Internal*)__Instance)->maxOldGenerationSize;
            }

            set
            {
                ((__Internal*)__Instance)->maxOldGenerationSize = value;
            }
        }

        /// <summary>optional limits of memory use of the vm.</summary>
        public ulong MaxYoungGenerationSize
        {
            get
            {
                return ((__Internal*)__Instance)->maxYoungGenerationSize;
            }

            set
            {
                ((__Internal*)__Instance)->maxYoungGenerationSize = value;
            }
        }

        /// <summary>optional limits of memory use of the vm.</summary>
        public ulong InitialOldGenerationSize
        {
            get
            {
                return ((__Internal*)__Instance)->initialOldGenerationSize;
            }

            set
            {
                ((__Internal*)__Instance)->initialOldGenerationSize = value;
            }
        }

        /// <summary>optional limits of memory use of the vm.</summary>
        public ulong InitialYoungGenerationSize
        {
            get
            {
                return ((__Internal*)__Instance)->initialYoungGenerationSize;
            }

            set
            {
                ((__Internal*)__Instance)->initialYoungGenerationSize = value;
            }
        }

        /// <summary>Optional startup snapshot data.</summary>
        public string SnapshotBlobData
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->snapshotBlobData);
            }

            set
            {
                if (__snapshotBlobData_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->snapshotBlobData);
                __snapshotBlobData_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->snapshotBlobData = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->snapshotBlobData = (__IntPtr) __bytePtr0;
            }
        }

        /// <summary>Optional size of the startup snapshot data.</summary>
        public ulong SnapshotBlobSize
        {
            get
            {
                return ((__Internal*)__Instance)->snapshotBlobSize;
            }

            set
            {
                ((__Internal*)__Instance)->snapshotBlobSize = value;
            }
        }

        /// <summary>Whether the VM is used for creating snapshot.</summary>
        public bool IsForSnapshotting
        {
            get
            {
                return ((__Internal*)__Instance)->isForSnapshotting != 0;
            }

            set
            {
                ((__Internal*)__Instance)->isForSnapshotting = (byte) (value ? 1 : 0);
            }
        }
    }

    /// <summary>JavaScript VM info.</summary>
    /// <remarks>11</remarks>
    public unsafe partial class JSVM_VMInfo : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public partial struct __Internal
        {
            internal uint apiVersion;
            internal __IntPtr engine;
            internal __IntPtr version;
            internal uint cachedDataVersionTag;

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "_ZN11JSVM_VMInfoC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_VMInfo> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_VMInfo>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_VMInfo managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_VMInfo managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __engine_OwnsNativeMemory = false;
        private bool __version_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static JSVM_VMInfo __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_VMInfo(native.ToPointer(), skipVTables);
        }

        internal static JSVM_VMInfo __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_VMInfo)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_VMInfo __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_VMInfo(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_VMInfo(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_VMInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public JSVM_VMInfo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_VMInfo.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public JSVM_VMInfo(global::OpenHarmony.NDK.Bindings.JSVM_VMInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_VMInfo.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::OpenHarmony.NDK.Bindings.JSVM_VMInfo.__Internal*) __Instance) = *((global::OpenHarmony.NDK.Bindings.JSVM_VMInfo.__Internal*) _0.__Instance);
            if (_0.__engine_OwnsNativeMemory)
                this.Engine = _0.Engine;
            if (_0.__version_OwnsNativeMemory)
                this.Version = _0.Version;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__engine_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->engine);
            if (__version_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->version);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>The highest API version this VM supports.</summary>
        public uint ApiVersion
        {
            get
            {
                return ((__Internal*)__Instance)->apiVersion;
            }

            set
            {
                ((__Internal*)__Instance)->apiVersion = value;
            }
        }

        /// <summary>The engine name implementing the VM.</summary>
        public string Engine
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->engine);
            }

            set
            {
                if (__engine_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->engine);
                __engine_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->engine = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->engine = (__IntPtr) __bytePtr0;
            }
        }

        /// <summary>The version of the VM.</summary>
        public string Version
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->version);
            }

            set
            {
                if (__version_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->version);
                __version_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->version = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->version = (__IntPtr) __bytePtr0;
            }
        }

        /// <summary>The cached data version tag.</summary>
        public uint CachedDataVersionTag
        {
            get
            {
                return ((__Internal*)__Instance)->cachedDataVersionTag;
            }

            set
            {
                ((__Internal*)__Instance)->cachedDataVersionTag = value;
            }
        }
    }

    /// <summary>Property descriptor.</summary>
    /// <remarks>11</remarks>
    public unsafe partial class JSVM_PropertyDescriptor : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 56)]
        public partial struct __Internal
        {
            internal __IntPtr utf8name;
            internal __IntPtr name;
            internal __IntPtr method;
            internal __IntPtr getter;
            internal __IntPtr setter;
            internal __IntPtr value;
            internal global::OpenHarmony.NDK.Bindings.JSVM_PropertyAttributes attributes;

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "_ZN23JSVM_PropertyDescriptorC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_PropertyDescriptor> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_PropertyDescriptor>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_PropertyDescriptor managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_PropertyDescriptor managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __utf8name_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static JSVM_PropertyDescriptor __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_PropertyDescriptor(native.ToPointer(), skipVTables);
        }

        internal static JSVM_PropertyDescriptor __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_PropertyDescriptor)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_PropertyDescriptor __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_PropertyDescriptor(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_PropertyDescriptor(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_PropertyDescriptor(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public JSVM_PropertyDescriptor()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_PropertyDescriptor.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public JSVM_PropertyDescriptor(global::OpenHarmony.NDK.Bindings.JSVM_PropertyDescriptor _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_PropertyDescriptor.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::OpenHarmony.NDK.Bindings.JSVM_PropertyDescriptor.__Internal*) __Instance) = *((global::OpenHarmony.NDK.Bindings.JSVM_PropertyDescriptor.__Internal*) _0.__Instance);
            if (_0.__utf8name_OwnsNativeMemory)
                this.Utf8name = _0.Utf8name;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__utf8name_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->utf8name);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>
        /// <para>Optional string describing the key for the property, encoded as UTF8.</para>
        /// <para>One of utf8name or name must be provided for the property.</para>
        /// </summary>
        public string Utf8name
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->utf8name);
            }

            set
            {
                if (__utf8name_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->utf8name);
                __utf8name_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->utf8name = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->utf8name = (__IntPtr) __bytePtr0;
            }
        }

        /// <summary>Optional value that points to a JavaScript string or symbol to be used as the key for the property.</summary>
        public global::OpenHarmony.NDK.Bindings.JSVM_Value Name
        {
            get
            {
                var __result0 = global::OpenHarmony.NDK.Bindings.JSVM_Value.__GetOrCreateInstance(((__Internal*)__Instance)->name, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->name = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        /// <summary>
        /// <para>Set this to make the property descriptor object's value property to be</para>
        /// <para>a JavaScript function represented by method.</para>
        /// </summary>
        public global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct Method
        {
            get
            {
                var __result0 = global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct.__GetOrCreateInstance(((__Internal*)__Instance)->method, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->method = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        /// <summary>A function to call when a get access of the property is performed.</summary>
        public global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct Getter
        {
            get
            {
                var __result0 = global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct.__GetOrCreateInstance(((__Internal*)__Instance)->getter, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->getter = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        /// <summary>A function to call when a set access of the property is performed.</summary>
        public global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct Setter
        {
            get
            {
                var __result0 = global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct.__GetOrCreateInstance(((__Internal*)__Instance)->setter, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->setter = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        /// <summary>The value that's retrieved by a get access of the property if the property is a data property.</summary>
        public global::OpenHarmony.NDK.Bindings.JSVM_Value Value
        {
            get
            {
                var __result0 = global::OpenHarmony.NDK.Bindings.JSVM_Value.__GetOrCreateInstance(((__Internal*)__Instance)->value, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->value = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        /// <summary>The attributes associated with the particular property.</summary>
        public global::OpenHarmony.NDK.Bindings.JSVM_PropertyAttributes Attributes
        {
            get
            {
                return ((__Internal*)__Instance)->attributes;
            }

            set
            {
                ((__Internal*)__Instance)->attributes = value;
            }
        }
    }

    /// <summary>JSVM-API uses both return values and JavaScript exceptions for error handling</summary>
    /// <remarks>11</remarks>
    public unsafe partial class JSVM_ExtendedErrorInfo : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal __IntPtr errorMessage;
            internal __IntPtr engineReserved;
            internal uint engineErrorCode;
            internal global::OpenHarmony.NDK.Bindings.JSVM_Status errorCode;

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "_ZN22JSVM_ExtendedErrorInfoC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_ExtendedErrorInfo> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_ExtendedErrorInfo>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_ExtendedErrorInfo managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_ExtendedErrorInfo managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __errorMessage_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static JSVM_ExtendedErrorInfo __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_ExtendedErrorInfo(native.ToPointer(), skipVTables);
        }

        internal static JSVM_ExtendedErrorInfo __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_ExtendedErrorInfo)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_ExtendedErrorInfo __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_ExtendedErrorInfo(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_ExtendedErrorInfo(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_ExtendedErrorInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public JSVM_ExtendedErrorInfo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_ExtendedErrorInfo.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public JSVM_ExtendedErrorInfo(global::OpenHarmony.NDK.Bindings.JSVM_ExtendedErrorInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_ExtendedErrorInfo.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::OpenHarmony.NDK.Bindings.JSVM_ExtendedErrorInfo.__Internal*) __Instance) = *((global::OpenHarmony.NDK.Bindings.JSVM_ExtendedErrorInfo.__Internal*) _0.__Instance);
            if (_0.__errorMessage_OwnsNativeMemory)
                this.ErrorMessage = _0.ErrorMessage;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__errorMessage_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->errorMessage);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>UTF8-encoded string containing a VM-neutral description of the error.</summary>
        public string ErrorMessage
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->errorMessage);
            }

            set
            {
                if (__errorMessage_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->errorMessage);
                __errorMessage_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->errorMessage = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->errorMessage = (__IntPtr) __bytePtr0;
            }
        }

        /// <summary>Reserved for VM-specific error details. This is currently not implemented for any VM.</summary>
        public __IntPtr EngineReserved
        {
            get
            {
                return ((__Internal*)__Instance)->engineReserved;
            }

            set
            {
                ((__Internal*)__Instance)->engineReserved = (__IntPtr) value;
            }
        }

        /// <summary>VM-specific error code. This is currently not implemented for any VM.</summary>
        public uint EngineErrorCode
        {
            get
            {
                return ((__Internal*)__Instance)->engineErrorCode;
            }

            set
            {
                ((__Internal*)__Instance)->engineErrorCode = value;
            }
        }

        /// <summary>The JSVM-API status code that originated with the last error.</summary>
        public global::OpenHarmony.NDK.Bindings.JSVM_Status ErrorCode
        {
            get
            {
                return ((__Internal*)__Instance)->errorCode;
            }

            set
            {
                ((__Internal*)__Instance)->errorCode = value;
            }
        }
    }

    /// <summary>
    /// <para>A 128-bit value stored as two unsigned 64-bit integers.</para>
    /// <para>It serves as a UUID with which JavaScript objects or externals can be &quot;tagged&quot;</para>
    /// <para>in order to ensure that they are of a certain type.</para>
    /// </summary>
    /// <remarks>11</remarks>
    public unsafe partial class JSVM_TypeTag : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal ulong lower;
            internal ulong upper;

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "_ZN12JSVM_TypeTagC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_TypeTag> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_TypeTag>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_TypeTag managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_TypeTag managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_TypeTag __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_TypeTag(native.ToPointer(), skipVTables);
        }

        internal static JSVM_TypeTag __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_TypeTag)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_TypeTag __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_TypeTag(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_TypeTag(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_TypeTag(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public JSVM_TypeTag()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_TypeTag.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public JSVM_TypeTag(global::OpenHarmony.NDK.Bindings.JSVM_TypeTag _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_TypeTag.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::OpenHarmony.NDK.Bindings.JSVM_TypeTag.__Internal*) __Instance) = *((global::OpenHarmony.NDK.Bindings.JSVM_TypeTag.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>lower type.</summary>
        public ulong Lower
        {
            get
            {
                return ((__Internal*)__Instance)->lower;
            }

            set
            {
                ((__Internal*)__Instance)->lower = value;
            }
        }

        /// <summary>upper type.</summary>
        public ulong Upper
        {
            get
            {
                return ((__Internal*)__Instance)->upper;
            }

            set
            {
                ((__Internal*)__Instance)->upper = value;
            }
        }
    }

    /// <summary>
    /// <para>When the object's getter, setter, deleter, and enumerator operations are performed, the corresponding</para>
    /// <para>callback will be triggered.</para>
    /// </summary>
    /// <remarks>12</remarks>
    public unsafe partial class JSVM_PropertyHandlerConfigurationStruct : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 80)]
        public partial struct __Internal
        {
            internal __IntPtr genericNamedPropertyGetterCallback;
            internal __IntPtr genericNamedPropertySetterCallback;
            internal __IntPtr genericNamedPropertyDeleterCallback;
            internal __IntPtr genericNamedPropertyEnumeratorCallback;
            internal __IntPtr genericIndexedPropertyGetterCallback;
            internal __IntPtr genericIndexedPropertySetterCallback;
            internal __IntPtr genericIndexedPropertyDeleterCallback;
            internal __IntPtr genericIndexedPropertyEnumeratorCallback;
            internal __IntPtr namedPropertyData;
            internal __IntPtr indexedPropertyData;

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "_ZN39JSVM_PropertyHandlerConfigurationStructC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_PropertyHandlerConfigurationStruct> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_PropertyHandlerConfigurationStruct>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_PropertyHandlerConfigurationStruct managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_PropertyHandlerConfigurationStruct managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_PropertyHandlerConfigurationStruct __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_PropertyHandlerConfigurationStruct(native.ToPointer(), skipVTables);
        }

        internal static JSVM_PropertyHandlerConfigurationStruct __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_PropertyHandlerConfigurationStruct)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_PropertyHandlerConfigurationStruct __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_PropertyHandlerConfigurationStruct(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_PropertyHandlerConfigurationStruct(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_PropertyHandlerConfigurationStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public JSVM_PropertyHandlerConfigurationStruct()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_PropertyHandlerConfigurationStruct.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public JSVM_PropertyHandlerConfigurationStruct(global::OpenHarmony.NDK.Bindings.JSVM_PropertyHandlerConfigurationStruct _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_PropertyHandlerConfigurationStruct.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::OpenHarmony.NDK.Bindings.JSVM_PropertyHandlerConfigurationStruct.__Internal*) __Instance) = *((global::OpenHarmony.NDK.Bindings.JSVM_PropertyHandlerConfigurationStruct.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>A callback function triggered by getting a named property of an instance object.</summary>
        public global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr GenericNamedPropertyGetterCallback
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->genericNamedPropertyGetterCallback;
                return __ptr0 == IntPtr.Zero? null : (global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->genericNamedPropertyGetterCallback = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>A callback function triggered by setting a named property of an instance object.</summary>
        public global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr GenericNamedPropertySetterCallback
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->genericNamedPropertySetterCallback;
                return __ptr0 == IntPtr.Zero? null : (global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->genericNamedPropertySetterCallback = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>A callback function triggered by deleting a named property of an instance object.</summary>
        public global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr GenericNamedPropertyDeleterCallback
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->genericNamedPropertyDeleterCallback;
                return __ptr0 == IntPtr.Zero? null : (global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->genericNamedPropertyDeleterCallback = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>A callback function triggered by getting all named properties requests on an object.</summary>
        public global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr GenericNamedPropertyEnumeratorCallback
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->genericNamedPropertyEnumeratorCallback;
                return __ptr0 == IntPtr.Zero? null : (global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->genericNamedPropertyEnumeratorCallback = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>A callback function triggered by getting an indexed property of an instance object.</summary>
        public global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr GenericIndexedPropertyGetterCallback
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->genericIndexedPropertyGetterCallback;
                return __ptr0 == IntPtr.Zero? null : (global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->genericIndexedPropertyGetterCallback = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>A callback function triggered by setting an indexed property of an instance object.</summary>
        public global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr GenericIndexedPropertySetterCallback
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->genericIndexedPropertySetterCallback;
                return __ptr0 == IntPtr.Zero? null : (global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->genericIndexedPropertySetterCallback = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>A callback function triggered by deleting an indexed property of an instance object.</summary>
        public global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr GenericIndexedPropertyDeleterCallback
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->genericIndexedPropertyDeleterCallback;
                return __ptr0 == IntPtr.Zero? null : (global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->genericIndexedPropertyDeleterCallback = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>A callback function triggered by getting all indexed properties requests on an object.</summary>
        public global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr GenericIndexedPropertyEnumeratorCallback
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->genericIndexedPropertyEnumeratorCallback;
                return __ptr0 == IntPtr.Zero? null : (global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::OpenHarmony.NDK.Bindings.Delegates.Func___IntPtr___IntPtr___IntPtr___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->genericIndexedPropertyEnumeratorCallback = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        /// <summary>data will be utilized by the named property callbacks in this struct.</summary>
        public global::OpenHarmony.NDK.Bindings.JSVM_Value NamedPropertyData
        {
            get
            {
                var __result0 = global::OpenHarmony.NDK.Bindings.JSVM_Value.__GetOrCreateInstance(((__Internal*)__Instance)->namedPropertyData, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->namedPropertyData = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        /// <summary>data will be utilized by the indexed property callbacks in this struct.</summary>
        public global::OpenHarmony.NDK.Bindings.JSVM_Value IndexedPropertyData
        {
            get
            {
                var __result0 = global::OpenHarmony.NDK.Bindings.JSVM_Value.__GetOrCreateInstance(((__Internal*)__Instance)->indexedPropertyData, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->indexedPropertyData = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }
    }

    /// <summary>Source code information.</summary>
    /// <remarks>12</remarks>
    public unsafe partial class JSVM_ScriptOrigin : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public partial struct __Internal
        {
            internal __IntPtr sourceMapUrl;
            internal __IntPtr resourceName;
            internal ulong resourceLineOffset;
            internal ulong resourceColumnOffset;

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "_ZN17JSVM_ScriptOriginC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_ScriptOrigin> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_ScriptOrigin>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_ScriptOrigin managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_ScriptOrigin managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __sourceMapUrl_OwnsNativeMemory = false;
        private bool __resourceName_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static JSVM_ScriptOrigin __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_ScriptOrigin(native.ToPointer(), skipVTables);
        }

        internal static JSVM_ScriptOrigin __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_ScriptOrigin)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_ScriptOrigin __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_ScriptOrigin(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_ScriptOrigin(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_ScriptOrigin(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public JSVM_ScriptOrigin()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_ScriptOrigin.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public JSVM_ScriptOrigin(global::OpenHarmony.NDK.Bindings.JSVM_ScriptOrigin _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_ScriptOrigin.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::OpenHarmony.NDK.Bindings.JSVM_ScriptOrigin.__Internal*) __Instance) = *((global::OpenHarmony.NDK.Bindings.JSVM_ScriptOrigin.__Internal*) _0.__Instance);
            if (_0.__sourceMapUrl_OwnsNativeMemory)
                this.SourceMapUrl = _0.SourceMapUrl;
            if (_0.__resourceName_OwnsNativeMemory)
                this.ResourceName = _0.ResourceName;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__sourceMapUrl_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->sourceMapUrl);
            if (__resourceName_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->resourceName);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Sourcemap url.</summary>
        public string SourceMapUrl
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->sourceMapUrl);
            }

            set
            {
                if (__sourceMapUrl_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->sourceMapUrl);
                __sourceMapUrl_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->sourceMapUrl = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->sourceMapUrl = (__IntPtr) __bytePtr0;
            }
        }

        /// <summary>Resource name.</summary>
        public string ResourceName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->resourceName);
            }

            set
            {
                if (__resourceName_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->resourceName);
                __resourceName_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->resourceName = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->resourceName = (__IntPtr) __bytePtr0;
            }
        }

        /// <summary>Resource line offset.</summary>
        public ulong ResourceLineOffset
        {
            get
            {
                return ((__Internal*)__Instance)->resourceLineOffset;
            }

            set
            {
                ((__Internal*)__Instance)->resourceLineOffset = value;
            }
        }

        /// <summary>Resource column offset.</summary>
        public ulong ResourceColumnOffset
        {
            get
            {
                return ((__Internal*)__Instance)->resourceColumnOffset;
            }

            set
            {
                ((__Internal*)__Instance)->resourceColumnOffset = value;
            }
        }
    }

    /// <summary>Compile Options</summary>
    /// <remarks>12</remarks>
    public unsafe partial class JSVM_CompileOptions : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal global::OpenHarmony.NDK.Bindings.JSVM_CompileOptionId id;
            internal global::OpenHarmony.NDK.Bindings.JSVM_CompileOptions.Content.__Internal content;

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "_ZN19JSVM_CompileOptionsC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
        }

        /// <summary>option content.</summary>
        public unsafe partial struct Content
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal __IntPtr ptr;

                [FieldOffset(0)]
                internal int num;

                [FieldOffset(0)]
                internal byte boolean;

                [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "_ZN19JSVM_CompileOptionsUt_C2ERKS0_", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
            }

            private Content.__Internal __instance;
            internal ref Content.__Internal __Instance => ref __instance;

            internal static Content __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                return new Content(native.ToPointer(), skipVTables);
            }

            internal static Content __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new Content(native, skipVTables);
            }

            private Content(__Internal native, bool skipVTables = false)
                : this()
            {
                __instance = native;
            }

            private Content(void* native, bool skipVTables = false) : this()
            {
                __instance = *(global::OpenHarmony.NDK.Bindings.JSVM_CompileOptions.Content.__Internal*) native;
            }

            public Content(global::OpenHarmony.NDK.Bindings.JSVM_CompileOptions.Content _0)
                : this()
            {
                var ____arg0 = _0.__Instance;
                var __arg0 = new __IntPtr(&____arg0);
                fixed (__Internal* __instancePtr = &__instance)
                {
                    __Internal.cctor(new __IntPtr(__instancePtr), __arg0);
                }
            }

            /// <summary>ptr type.</summary>
            public __IntPtr Ptr
            {
                get
                {
                    return __instance.ptr;
                }

                set
                {
                    __instance.ptr = (__IntPtr) value;
                }
            }

            /// <summary>int type.</summary>
            public int Num
            {
                get
                {
                    return __instance.num;
                }

                set
                {
                    __instance.num = value;
                }
            }

            /// <summary>bool type.</summary>
            public bool Boolean
            {
                get
                {
                    return __instance.boolean != 0;
                }

                set
                {
                    __instance.boolean = (byte) (value ? 1 : 0);
                }
            }
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_CompileOptions> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_CompileOptions>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_CompileOptions managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_CompileOptions managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_CompileOptions __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_CompileOptions(native.ToPointer(), skipVTables);
        }

        internal static JSVM_CompileOptions __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_CompileOptions)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_CompileOptions __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_CompileOptions(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_CompileOptions(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_CompileOptions(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public JSVM_CompileOptions()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_CompileOptions.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public JSVM_CompileOptions(global::OpenHarmony.NDK.Bindings.JSVM_CompileOptions _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_CompileOptions.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::OpenHarmony.NDK.Bindings.JSVM_CompileOptions.__Internal*) __Instance) = *((global::OpenHarmony.NDK.Bindings.JSVM_CompileOptions.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>compile option id.</summary>
        public global::OpenHarmony.NDK.Bindings.JSVM_CompileOptionId Id
        {
            get
            {
                return ((__Internal*)__Instance)->id;
            }

            set
            {
                ((__Internal*)__Instance)->id = value;
            }
        }

        public global::OpenHarmony.NDK.Bindings.JSVM_CompileOptions.Content content
        {
            get
            {
                return global::OpenHarmony.NDK.Bindings.JSVM_CompileOptions.Content.__CreateInstance(((__Internal*)__Instance)->content);
            }

            set
            {
                ((__Internal*)__Instance)->content = value.__Instance;
            }
        }
    }

    /// <summary>code cache passed with JSVM_COMPILE_CODE_CACHE</summary>
    /// <remarks>12</remarks>
    public unsafe partial class JSVM_CodeCache : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal __IntPtr cache;
            internal ulong length;

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "_ZN14JSVM_CodeCacheC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_CodeCache> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_CodeCache>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_CodeCache managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_CodeCache managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_CodeCache __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_CodeCache(native.ToPointer(), skipVTables);
        }

        internal static JSVM_CodeCache __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_CodeCache)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_CodeCache __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_CodeCache(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_CodeCache(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_CodeCache(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public JSVM_CodeCache()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_CodeCache.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public JSVM_CodeCache(global::OpenHarmony.NDK.Bindings.JSVM_CodeCache _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_CodeCache.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::OpenHarmony.NDK.Bindings.JSVM_CodeCache.__Internal*) __Instance) = *((global::OpenHarmony.NDK.Bindings.JSVM_CodeCache.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>cache pointer.</summary>
        public byte* Cache
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->cache;
            }

            set
            {
                ((__Internal*)__Instance)->cache = (__IntPtr) value;
            }
        }

        /// <summary>length.</summary>
        public ulong Length
        {
            get
            {
                return ((__Internal*)__Instance)->length;
            }

            set
            {
                ((__Internal*)__Instance)->length = value;
            }
        }
    }

    /// <summary>compile profile passed with JSVM_COMPILE_COMPILE_PROFILE</summary>
    /// <remarks>12</remarks>
    public unsafe partial class __0 : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal __IntPtr profile;
            internal ulong length;

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "_ZN3$_0C2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.__0> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.__0>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.__0 managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.__0 managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static __0 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new __0(native.ToPointer(), skipVTables);
        }

        internal static __0 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (__0)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static __0 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new __0(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private __0(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected __0(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public __0()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.__0.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public __0(global::OpenHarmony.NDK.Bindings.__0 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.__0.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::OpenHarmony.NDK.Bindings.__0.__Internal*) __Instance) = *((global::OpenHarmony.NDK.Bindings.__0.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>profile pointer.</summary>
        public int* Profile
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->profile;
            }

            set
            {
                ((__Internal*)__Instance)->profile = (__IntPtr) value;
            }
        }

        /// <summary>length.</summary>
        public ulong Length
        {
            get
            {
                return ((__Internal*)__Instance)->length;
            }

            set
            {
                ((__Internal*)__Instance)->length = value;
            }
        }
    }

    /// <summary>DefineClass options.</summary>
    /// <remarks>18</remarks>
    public unsafe partial class JSVM_DefineClassOptions : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptionsId id;
            internal global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptions.Content.__Internal content;

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "_ZN23JSVM_DefineClassOptionsC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
        }

        /// <summary>option content.</summary>
        public unsafe partial struct Content
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal __IntPtr ptr;

                [FieldOffset(0)]
                internal int num;

                [FieldOffset(0)]
                internal byte boolean;

                [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "_ZN23JSVM_DefineClassOptionsUt_C2ERKS0_", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
            }

            private Content.__Internal __instance;
            internal ref Content.__Internal __Instance => ref __instance;

            internal static Content __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                return new Content(native.ToPointer(), skipVTables);
            }

            internal static Content __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new Content(native, skipVTables);
            }

            private Content(__Internal native, bool skipVTables = false)
                : this()
            {
                __instance = native;
            }

            private Content(void* native, bool skipVTables = false) : this()
            {
                __instance = *(global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptions.Content.__Internal*) native;
            }

            public Content(global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptions.Content _0)
                : this()
            {
                var ____arg0 = _0.__Instance;
                var __arg0 = new __IntPtr(&____arg0);
                fixed (__Internal* __instancePtr = &__instance)
                {
                    __Internal.cctor(new __IntPtr(__instancePtr), __arg0);
                }
            }

            /// <summary>for option value with pointer type.</summary>
            public __IntPtr Ptr
            {
                get
                {
                    return __instance.ptr;
                }

                set
                {
                    __instance.ptr = (__IntPtr) value;
                }
            }

            /// <summary>for option value with integer type</summary>
            public int Num
            {
                get
                {
                    return __instance.num;
                }

                set
                {
                    __instance.num = value;
                }
            }

            /// <summary>for option value with bool type</summary>
            public bool Boolean
            {
                get
                {
                    return __instance.boolean != 0;
                }

                set
                {
                    __instance.boolean = (byte) (value ? 1 : 0);
                }
            }
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptions> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptions>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptions managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptions managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_DefineClassOptions __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_DefineClassOptions(native.ToPointer(), skipVTables);
        }

        internal static JSVM_DefineClassOptions __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_DefineClassOptions)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_DefineClassOptions __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_DefineClassOptions(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_DefineClassOptions(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_DefineClassOptions(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public JSVM_DefineClassOptions()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptions.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public JSVM_DefineClassOptions(global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptions _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptions.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptions.__Internal*) __Instance) = *((global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptions.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>DefineClass option id.</summary>
        public global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptionsId Id
        {
            get
            {
                return ((__Internal*)__Instance)->id;
            }

            set
            {
                ((__Internal*)__Instance)->id = value;
            }
        }

        public global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptions.Content content
        {
            get
            {
                return global::OpenHarmony.NDK.Bindings.JSVM_DefineClassOptions.Content.__CreateInstance(((__Internal*)__Instance)->content);
            }

            set
            {
                ((__Internal*)__Instance)->content = value.__Instance;
            }
        }
    }

    /// <summary>The property-handler used to define class.</summary>
    /// <remarks>18</remarks>
    public unsafe partial class JSVM_PropertyHandler : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal __IntPtr propertyHandlerCfg;
            internal __IntPtr callAsFunctionCallback;

            [SuppressUnmanagedCodeSecurity, DllImport("jsvm", EntryPoint = "_ZN20JSVM_PropertyHandlerC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_PropertyHandler> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::OpenHarmony.NDK.Bindings.JSVM_PropertyHandler>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::OpenHarmony.NDK.Bindings.JSVM_PropertyHandler managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::OpenHarmony.NDK.Bindings.JSVM_PropertyHandler managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static JSVM_PropertyHandler __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new JSVM_PropertyHandler(native.ToPointer(), skipVTables);
        }

        internal static JSVM_PropertyHandler __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (JSVM_PropertyHandler)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static JSVM_PropertyHandler __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new JSVM_PropertyHandler(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JSVM_PropertyHandler(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected JSVM_PropertyHandler(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public JSVM_PropertyHandler()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_PropertyHandler.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public JSVM_PropertyHandler(global::OpenHarmony.NDK.Bindings.JSVM_PropertyHandler _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::OpenHarmony.NDK.Bindings.JSVM_PropertyHandler.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::OpenHarmony.NDK.Bindings.JSVM_PropertyHandler.__Internal*) __Instance) = *((global::OpenHarmony.NDK.Bindings.JSVM_PropertyHandler.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>The instance object triggers the corresponding callback function.</summary>
        public global::OpenHarmony.NDK.Bindings.JSVM_PropertyHandlerConfigurationStruct PropertyHandlerCfg
        {
            get
            {
                var __result0 = global::OpenHarmony.NDK.Bindings.JSVM_PropertyHandlerConfigurationStruct.__GetOrCreateInstance(((__Internal*)__Instance)->propertyHandlerCfg, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->propertyHandlerCfg = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        /// <summary>Calling an instance object as a function will trigger this callback.</summary>
        public global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct CallAsFunctionCallback
        {
            get
            {
                var __result0 = global::OpenHarmony.NDK.Bindings.JSVM_CallbackStruct.__GetOrCreateInstance(((__Internal*)__Instance)->callAsFunctionCallback, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->callAsFunctionCallback = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }
    }

    namespace Delegates
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate __IntPtr Func___IntPtr___IntPtr___IntPtr(__IntPtr env, __IntPtr info);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate __IntPtr Func___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr(__IntPtr env, __IntPtr name, __IntPtr thisArg, __IntPtr namedPropertyData);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate __IntPtr Func___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr___IntPtr(__IntPtr env, __IntPtr name, __IntPtr property, __IntPtr thisArg, __IntPtr namedPropertyData);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate __IntPtr Func___IntPtr___IntPtr___IntPtr___IntPtr(__IntPtr env, __IntPtr thisArg, __IntPtr namedPropertyData);
    }
}
